// This file is auto-generated by @hey-api/openapi-ts

/**
 * Character Create Parameters
 * Parameters for creating a new character
 */
export type CharacterCreateParams = {
    /**
     * Whether this character is alive
     */
    alive?: boolean;
    /**
     * Character class
     */
    class: string;
    /**
     * Character content
     */
    content?: string;
    /**
     * Character content as plain text
     */
    content_plain_text?: string;
    /**
     * Role within the faction
     */
    faction_role?: string;
    /**
     * Character image URL
     */
    image_url?: string;
    /**
     * Character level
     */
    level: number;
    /**
     * ID of faction this character belongs to
     */
    member_of_faction_id?: string;
    /**
     * Character name
     */
    name: string;
    /**
     * Character race
     */
    race?: string;
    /**
     * Tags for this character
     */
    tags?: Array<string>;
};

/**
 * Entities
 * Collection of game entities
 */
export type Entities = {
    /**
     * Characters list
     */
    characters?: Array<EntityCharacter>;
    /**
     * Factions list
     */
    factions?: Array<EntityFaction>;
    /**
     * Locations list
     */
    locations?: Array<EntityLocation>;
    /**
     * Notes list
     */
    notes?: Array<EntityNote>;
    /**
     * Quests list
     */
    quests?: Array<EntityQuest>;
};

/**
 * Error Details
 * Detailed error information
 */
export type ErrorDetails = {
    [key: string]: unknown;
};

/**
 * Location Create Parameters
 * Parameters for creating a new location
 */
export type LocationCreateParams = {
    /**
     * Location content
     */
    content?: string;
    /**
     * Location content as plain text
     */
    content_plain_text?: string;
    /**
     * Location name
     */
    name: string;
    /**
     * Parent location ID
     */
    parent_id?: string;
    /**
     * Tags for this location
     */
    tags?: Array<string>;
    /**
     * Location type
     */
    type: 'continent' | 'nation' | 'region' | 'city' | 'settlement' | 'building' | 'complex';
};

/**
 * Linked Location
 * A location with relationship metadata
 */
export type LinkedLocation = {
    /**
     * Location content
     */
    content?: string;
    /**
     * Location content as plain text
     */
    content_plain_text?: string;
    /**
     * Description of the relationship
     */
    description_meta?: string;
    /**
     * Location ID
     */
    id: string;
    /**
     * Whether the relationship is active
     */
    is_active?: boolean;
    /**
     * Additional metadata
     */
    metadata?: {
        [key: string]: unknown;
    };
    /**
     * Location name
     */
    name: string;
    /**
     * Type of relationship
     */
    relationship_type?: string;
    /**
     * Relationship strength (1-10)
     */
    strength?: number;
    /**
     * Location tags
     */
    tags?: Array<unknown>;
};

/**
 * Entity Tree Data
 * Entity relationship tree data grouped by entity types or single tree
 */
export type EntityTreeData = {
    /**
     * Character trees
     */
    characters?: Array<EntityTreeNode>;
    /**
     * Faction trees
     */
    factions?: Array<EntityTreeNode>;
    /**
     * Location trees
     */
    locations?: Array<EntityTreeNode>;
    /**
     * Note trees
     */
    notes?: Array<EntityTreeNode>;
    /**
     * Quest trees
     */
    quests?: Array<EntityTreeNode>;
};

/**
 * Game Update Parameters
 * Parameters for updating an existing game (partial updates supported)
 */
export type GameUpdateParams = {
    /**
     * Game content
     */
    content?: string;
    /**
     * Game content as plain text
     */
    content_plain_text?: string;
    /**
     * Game name
     */
    name?: string;
    /**
     * Game setting
     */
    setting?: string;
};

/**
 * Quest Update Request
 * Quest update parameters
 */
export type QuestUpdateRequest = {
    quest: QuestUpdateParams;
};

/**
 * Characters Response
 * Response containing a list of characters
 */
export type CharactersResponse = {
    /**
     * Response data
     */
    data?: Array<Character>;
};

/**
 * Faction Update Request
 * Faction update parameters
 */
export type FactionUpdateRequest = {
    faction: FactionUpdateParams;
};

/**
 * Entity Note
 * Note entity in game entities list
 */
export type EntityNote = {
    /**
     * Note content
     */
    content?: string;
    /**
     * Note content as plain text
     */
    content_plain_text?: string;
    /**
     * Creation timestamp
     */
    created_at?: string;
    /**
     * Note ID
     */
    id: string;
    /**
     * Note name
     */
    name: string;
    /**
     * Tags associated with this note
     */
    tags?: Array<string>;
    /**
     * Last update timestamp
     */
    updated_at?: string;
};

/**
 * Entity Tree Node
 * A single node in the entity relationship tree
 */
export type EntityTreeNode = {
    /**
     * Child entities
     */
    children: Array<EntityTreeNode>;
    /**
     * Relationship description
     */
    description?: string;
    /**
     * Entity ID
     */
    id: string;
    /**
     * Whether relationship is active
     */
    is_active?: boolean;
    /**
     * Additional relationship metadata
     */
    metadata?: {
        [key: string]: unknown;
    };
    /**
     * Entity name
     */
    name: string;
    /**
     * Type of relationship to parent
     */
    relationship_type?: string;
    /**
     * Relationship strength (1-5)
     */
    strength?: number;
    /**
     * Entity type
     */
    type: 'character' | 'faction' | 'location' | 'quest' | 'note';
};

/**
 * Error
 * Error response
 */
export type _Error = {
    errors?: ErrorDetails;
};

/**
 * Quest Tree Node
 * A node in the quest hierarchy tree
 */
export type QuestTreeNode = {
    /**
     * Child quests
     */
    children?: Array<QuestTreeNode>;
    /**
     * Quest content
     */
    content?: string;
    /**
     * Quest content as plain text
     */
    content_plain_text?: string;
    /**
     * Entity type for URL building
     */
    entity_type: 'quest';
    /**
     * Quest ID
     */
    id: string;
    /**
     * Quest name
     */
    name: string;
    /**
     * Parent quest ID
     */
    parent_id?: string;
    /**
     * Quest status
     */
    status: 'preparing' | 'ready' | 'active' | 'paused' | 'completed' | 'cancelled';
    /**
     * Tags associated with this quest
     */
    tags?: Array<string>;
};

/**
 * Character Primary Faction Response
 * Response containing character's primary faction data
 */
export type CharacterPrimaryFactionResponse = {
    data?: CharacterPrimaryFactionData;
};

/**
 * Faction Members Response
 * Response containing faction members
 */
export type FactionMembersResponse = {
    data?: FactionMembersData;
};

/**
 * Faction Links Data
 * Links associated with a faction
 */
export type FactionLinksData = {
    /**
     * Faction ID
     */
    faction_id: string;
    /**
     * Faction name
     */
    faction_name: string;
    links?: FactionLinks;
};

/**
 * Pinned Entities Data
 * All pinned entities for a game
 */
export type PinnedEntitiesData = {
    /**
     * Game ID
     */
    game_id: string;
    pinned_entities: PinnedEntities;
    /**
     * Total number of pinned entities
     */
    total_count: number;
};

/**
 * Quest Links Data
 * Links associated with a quest
 */
export type QuestLinksData = {
    links?: QuestLinks;
    /**
     * Quest ID
     */
    quest_id: string;
    /**
     * Quest name
     */
    quest_name: string;
};

/**
 * Entity Location
 * Location entity in game entities list
 */
export type EntityLocation = {
    /**
     * Location content
     */
    content?: string;
    /**
     * Location content as plain text
     */
    content_plain_text?: string;
    /**
     * Creation timestamp
     */
    created_at?: string;
    /**
     * Whether this location has a parent location
     */
    has_parent: boolean;
    /**
     * Location ID
     */
    id: string;
    /**
     * Location name
     */
    name: string;
    /**
     * Tags associated with this location
     */
    tags?: Array<string>;
    /**
     * Location type
     */
    type: 'continent' | 'nation' | 'region' | 'city' | 'settlement' | 'building' | 'complex';
    /**
     * Last update timestamp
     */
    updated_at?: string;
};

/**
 * Note Create Parameters
 * Parameters for creating a new note
 */
export type NoteCreateParams = {
    /**
     * Note content
     */
    content?: string;
    /**
     * Note content as plain text
     */
    content_plain_text?: string;
    /**
     * Note name
     */
    name: string;
    /**
     * Parent ID (note or other entity)
     */
    parent_id?: string;
    /**
     * Type of parent entity (character, quest, location, faction)
     */
    parent_type?: 'character' | 'quest' | 'location' | 'faction';
    /**
     * Tags for this note
     */
    tags?: Array<string>;
};

/**
 * Faction Create Parameters
 * Parameters for creating a new faction
 */
export type FactionCreateParams = {
    /**
     * Faction content
     */
    content?: string;
    /**
     * Faction content as plain text
     */
    content_plain_text?: string;
    /**
     * Faction name
     */
    name: string;
    /**
     * Tags for this faction
     */
    tags?: Array<string>;
};

/**
 * Faction Response
 * Response containing a single faction
 */
export type FactionResponse = {
    data?: Faction;
};

/**
 * Game Response
 * Response containing a single game
 */
export type GameResponse = {
    data?: Game;
};

/**
 * Quest
 * A game quest
 */
export type Quest = {
    /**
     * Quest content
     */
    content?: string;
    /**
     * Quest content as plain text
     */
    content_plain_text?: string;
    /**
     * Creation timestamp
     */
    created_at?: string;
    /**
     * Associated game ID
     */
    game_id: string;
    /**
     * Quest ID
     */
    id: string;
    /**
     * Quest name
     */
    name: string;
    /**
     * Parent quest ID for hierarchical structure
     */
    parent_id?: string;
    /**
     * Whether this quest is pinned
     */
    pinned: boolean;
    /**
     * Quest status
     */
    status: 'preparing' | 'ready' | 'active' | 'paused' | 'completed' | 'cancelled';
    /**
     * Tags associated with this quest
     */
    tags?: Array<string>;
    /**
     * Last update timestamp
     */
    updated_at?: string;
    /**
     * Creator user ID
     */
    user_id: number;
};

/**
 * Link Request
 * Request to create a link between entities
 */
export type LinkRequest = {
    /**
     * Free-form description of the relationship
     */
    description?: string;
    /**
     * Entity ID to link
     */
    entity_id: string;
    /**
     * Entity type to link
     */
    entity_type: 'character' | 'faction' | 'location' | 'quest' | 'note';
    /**
     * Whether the relationship is currently active
     */
    is_active?: boolean;
    /**
     * Additional flexible metadata as JSON
     */
    metadata?: {
        [key: string]: unknown;
    };
    /**
     * Type of relationship between entities
     */
    relationship_type?: string;
    /**
     * Relationship strength/importance (1-10)
     */
    strength?: number;
};

/**
 * Character Links
 * Collections of entities linked to a character
 */
export type CharacterLinks = {
    /**
     * Linked characters with metadata
     */
    characters?: Array<LinkedCharacter>;
    /**
     * Linked factions with metadata
     */
    factions?: Array<LinkedFaction>;
    /**
     * Linked locations with metadata
     */
    locations?: Array<LinkedLocation>;
    /**
     * Linked notes with metadata
     */
    notes?: Array<LinkedNote>;
    /**
     * Linked quests with metadata
     */
    quests?: Array<LinkedQuest>;
};

/**
 * Character Response
 * Response containing a single character
 */
export type CharacterResponse = {
    data?: Character;
};

/**
 * Quest Update Parameters
 * Parameters for updating an existing quest (partial updates supported)
 */
export type QuestUpdateParams = {
    /**
     * Quest content
     */
    content?: string;
    /**
     * Quest content as plain text
     */
    content_plain_text?: string;
    /**
     * Quest name
     */
    name?: string;
    /**
     * Parent quest ID for hierarchical structure
     */
    parent_id?: string;
    /**
     * Whether this quest is pinned
     */
    pinned?: boolean;
    /**
     * Quest status
     */
    status?: 'preparing' | 'ready' | 'active' | 'paused' | 'completed' | 'cancelled';
    /**
     * Tags for this quest
     */
    tags?: Array<string>;
};

/**
 * Quest Create Request
 * Quest creation parameters
 */
export type QuestCreateRequest = {
    quest: QuestCreateParams;
};

/**
 * Location
 * A game location
 */
export type Location = {
    /**
     * Location content
     */
    content?: string;
    /**
     * Location content as plain text
     */
    content_plain_text?: string;
    /**
     * Creation timestamp
     */
    created_at?: string;
    /**
     * Associated game ID
     */
    game_id: string;
    /**
     * Location ID
     */
    id: string;
    /**
     * Location name
     */
    name: string;
    /**
     * Parent location ID
     */
    parent_id?: string;
    /**
     * Whether this location is pinned
     */
    pinned: boolean;
    /**
     * Tags associated with this location
     */
    tags?: Array<string>;
    /**
     * Location type
     */
    type: 'continent' | 'nation' | 'region' | 'city' | 'settlement' | 'building' | 'complex';
    /**
     * Last update timestamp
     */
    updated_at?: string;
    /**
     * Creator user ID
     */
    user_id: number;
};

/**
 * Entity Tree Response
 * Response containing hierarchical tree of entity relationships
 */
export type EntityTreeResponse = {
    data?: EntityTreeData;
};

/**
 * Location Tree Response
 * Response containing hierarchical location tree
 */
export type LocationTreeResponse = {
    /**
     * Response data
     */
    data?: Array<LocationTreeNode>;
};

/**
 * Game
 * A game instance
 */
export type Game = {
    /**
     * Game content
     */
    content?: string;
    /**
     * Game content as plain text
     */
    content_plain_text?: string;
    /**
     * Creation timestamp
     */
    created_at?: string;
    /**
     * Game ID
     */
    id: string;
    /**
     * Game name
     */
    name: string;
    /**
     * Owner user ID
     */
    owner_id: number;
    /**
     * Game setting
     */
    setting?: string;
    /**
     * Last update timestamp
     */
    updated_at?: string;
};

/**
 * Character Primary Faction Data
 * Primary faction information for a character
 */
export type CharacterPrimaryFactionData = {
    /**
     * Character ID
     */
    character_id: string;
    faction: Faction;
    /**
     * Character's role in the faction
     */
    role: string;
};

/**
 * Location Create Request
 * Location creation parameters
 */
export type LocationCreateRequest = {
    location: LocationCreateParams;
};

/**
 * Character Create Request
 * Character creation parameters
 */
export type CharacterCreateRequest = {
    character: CharacterCreateParams;
};

/**
 * Faction Members Data
 * Characters that are members of a faction
 */
export type FactionMembersData = {
    /**
     * Faction ID
     */
    faction_id: string;
    /**
     * Faction name
     */
    faction_name: string;
    /**
     * Faction member characters
     */
    members?: Array<Character>;
};

/**
 * Note Update Request
 * Note update parameters
 */
export type NoteUpdateRequest = {
    note: NoteUpdateParams;
};

/**
 * Game Update Request
 * Game update parameters
 */
export type GameUpdateRequest = {
    game: GameUpdateParams;
};

/**
 * Locations Response
 * Response containing a list of locations
 */
export type LocationsResponse = {
    /**
     * Response data
     */
    data?: Array<Location>;
};

/**
 * Quests Response
 * Response containing a list of quests
 */
export type QuestsResponse = {
    /**
     * Response data
     */
    data?: Array<Quest>;
};

export type LinkedEntityBase = {
    /**
     * Description of the relationship
     */
    description?: string;
    /**
     * Whether the relationship is active
     */
    is_active?: boolean;
    /**
     * Additional metadata
     */
    metadata?: {
        [key: string]: unknown;
    };
    /**
     * Type of relationship
     */
    relationship_type?: string;
    /**
     * Relationship strength (1-10)
     */
    strength?: number;
};

/**
 * Faction Links
 * Collections of entities linked to a faction
 */
export type FactionLinks = {
    /**
     * Linked characters with metadata
     */
    characters?: Array<LinkedCharacter>;
    /**
     * Linked factions with metadata
     */
    factions?: Array<LinkedFaction>;
    /**
     * Linked locations with metadata
     */
    locations?: Array<LinkedLocation>;
    /**
     * Linked notes with metadata
     */
    notes?: Array<LinkedNote>;
    /**
     * Linked quests with metadata
     */
    quests?: Array<LinkedQuest>;
};

/**
 * Linked Quest
 * A quest with relationship metadata
 */
export type LinkedQuest = {
    /**
     * Quest content
     */
    content?: string;
    /**
     * Quest content as plain text
     */
    content_plain_text?: string;
    /**
     * Description of the relationship
     */
    description_meta?: string;
    /**
     * Quest ID
     */
    id: string;
    /**
     * Whether the relationship is active
     */
    is_active?: boolean;
    /**
     * Additional metadata
     */
    metadata?: {
        [key: string]: unknown;
    };
    /**
     * Quest name
     */
    name: string;
    /**
     * Type of relationship
     */
    relationship_type?: string;
    /**
     * Relationship strength (1-10)
     */
    strength?: number;
    /**
     * Quest tags
     */
    tags?: Array<unknown>;
};

/**
 * Entities Data
 * Game entities data structure
 */
export type EntitiesData = {
    entities?: Entities;
    /**
     * Game ID
     */
    game_id: string;
    /**
     * Game name
     */
    game_name: string;
};

/**
 * Quest Tree Response
 * Response containing hierarchical quest tree
 */
export type QuestTreeResponse = {
    /**
     * Response data
     */
    data?: Array<QuestTreeNode>;
};

/**
 * Entity Quest
 * Quest entity in game entities list
 */
export type EntityQuest = {
    /**
     * Quest content
     */
    content?: string;
    /**
     * Quest content as plain text
     */
    content_plain_text?: string;
    /**
     * Creation timestamp
     */
    created_at?: string;
    /**
     * Quest ID
     */
    id: string;
    /**
     * Quest name
     */
    name: string;
    /**
     * Parent quest ID for hierarchical structure
     */
    parent_id?: string;
    /**
     * Quest status
     */
    status: 'preparing' | 'ready' | 'active' | 'paused' | 'completed' | 'cancelled';
    /**
     * Tags associated with this quest
     */
    tags?: Array<string>;
    /**
     * Last update timestamp
     */
    updated_at?: string;
};

/**
 * Factions Response
 * Response containing a list of factions
 */
export type FactionsResponse = {
    /**
     * Response data
     */
    data?: Array<Faction>;
};

/**
 * Set Primary Faction Request
 * Parameters for setting a character's primary faction
 */
export type SetPrimaryFactionRequest = {
    /**
     * Faction ID
     */
    faction_id: string;
    /**
     * Character's role in the faction
     */
    role: string;
};

/**
 * Games Response
 * Response containing a list of games
 */
export type GamesResponse = {
    /**
     * Response data
     */
    data?: Array<Game>;
};

/**
 * Linked Note
 * A note with relationship metadata
 */
export type LinkedNote = {
    /**
     * Note content
     */
    content?: string;
    /**
     * Note content as plain text
     */
    content_plain_text?: string;
    /**
     * Description of the relationship
     */
    description_meta?: string;
    /**
     * Note ID
     */
    id: string;
    /**
     * Whether the relationship is active
     */
    is_active?: boolean;
    /**
     * Additional metadata
     */
    metadata?: {
        [key: string]: unknown;
    };
    /**
     * Note name
     */
    name: string;
    /**
     * Type of relationship
     */
    relationship_type?: string;
    /**
     * Relationship strength (1-10)
     */
    strength?: number;
    /**
     * Note tags
     */
    tags?: Array<unknown>;
};

/**
 * Location Links
 * Collections of entities linked to a location
 */
export type LocationLinks = {
    /**
     * Linked characters with metadata
     */
    characters?: Array<LinkedCharacter>;
    /**
     * Linked factions with metadata
     */
    factions?: Array<LinkedFaction>;
    /**
     * Linked locations with metadata
     */
    locations?: Array<LinkedLocation>;
    /**
     * Linked notes with metadata
     */
    notes?: Array<LinkedNote>;
    /**
     * Linked quests with metadata
     */
    quests?: Array<LinkedQuest>;
};

/**
 * Character Links Data
 * Links associated with a character
 */
export type CharacterLinksData = {
    /**
     * Character ID
     */
    character_id: string;
    /**
     * Character name
     */
    character_name: string;
    links?: CharacterLinks;
};

/**
 * Faction Create Request
 * Faction creation parameters
 */
export type FactionCreateRequest = {
    faction: FactionCreateParams;
};

/**
 * Notes Response
 * Response containing a list of notes
 */
export type NotesResponse = {
    /**
     * Response data
     */
    data?: Array<Note>;
};

/**
 * Note Tree Node
 * A node in the note hierarchy tree
 */
export type NoteTreeNode = {
    /**
     * Child notes
     */
    children?: Array<NoteTreeNode>;
    /**
     * Note content
     */
    content?: string;
    /**
     * Note content as plain text
     */
    content_plain_text?: string;
    /**
     * Creation timestamp
     */
    created_at?: string;
    /**
     * Entity type for URL building
     */
    entity_type: 'note';
    /**
     * Note ID
     */
    id: string;
    /**
     * Note name
     */
    name: string;
    /**
     * Parent ID (note or other entity)
     */
    parent_id?: string;
    /**
     * Type of parent entity (character, quest, location, faction)
     */
    parent_type?: 'character' | 'quest' | 'location' | 'faction';
    /**
     * Tags associated with this note
     */
    tags?: Array<string>;
    /**
     * Last update timestamp
     */
    updated_at?: string;
};

/**
 * Character Update Request
 * Character update parameters
 */
export type CharacterUpdateRequest = {
    character: CharacterUpdateParams;
};

/**
 * Note Links Response
 * Response containing note links
 */
export type NoteLinksResponse = {
    data?: NoteLinksData;
};

/**
 * Location Links Response
 * Response containing location links
 */
export type LocationLinksResponse = {
    data?: LocationLinksData;
};

/**
 * Location Tree Node
 * A node in the location hierarchy tree
 */
export type LocationTreeNode = {
    /**
     * Child locations
     */
    children?: Array<LocationTreeNode>;
    /**
     * Location content
     */
    content?: string;
    /**
     * Entity type for URL building
     */
    entity_type: 'location';
    /**
     * Location ID
     */
    id: string;
    /**
     * Location name
     */
    name: string;
    /**
     * Parent location ID
     */
    parent_id?: string;
    /**
     * Tags associated with this location
     */
    tags?: Array<string>;
    /**
     * Location type
     */
    type: 'continent' | 'nation' | 'region' | 'city' | 'settlement' | 'building' | 'complex';
};

/**
 * Pinned Entities Response
 * Response containing all pinned entities for a game
 */
export type PinnedEntitiesResponse = {
    data?: PinnedEntitiesData;
};

/**
 * Location Update Parameters
 * Parameters for updating an existing location (partial updates supported)
 */
export type LocationUpdateParams = {
    /**
     * Location content
     */
    content?: string;
    /**
     * Location content as plain text
     */
    content_plain_text?: string;
    /**
     * Location name
     */
    name?: string;
    /**
     * Parent location ID
     */
    parent_id?: string;
    /**
     * Whether this location is pinned
     */
    pinned?: boolean;
    /**
     * Tags for this location
     */
    tags?: Array<string>;
    /**
     * Location type
     */
    type?: 'continent' | 'nation' | 'region' | 'city' | 'settlement' | 'building' | 'complex';
};

/**
 * Location Links Data
 * Links associated with a location
 */
export type LocationLinksData = {
    links?: LocationLinks;
    /**
     * Location ID
     */
    location_id: string;
    /**
     * Location name
     */
    location_name: string;
};

/**
 * Game Create Request
 * Game creation parameters
 */
export type GameCreateRequest = {
    game: GameCreateParams;
};

/**
 * Entity Character
 * Character entity in game entities list
 */
export type EntityCharacter = {
    /**
     * Character class
     */
    class: string;
    /**
     * Character content
     */
    content?: string;
    /**
     * Character content as plain text
     */
    content_plain_text?: string;
    /**
     * Creation timestamp
     */
    created_at?: string;
    /**
     * Role within the faction
     */
    faction_role?: string;
    /**
     * Character ID
     */
    id: string;
    /**
     * Character image URL
     */
    image_url?: string;
    /**
     * Character level
     */
    level: number;
    /**
     * ID of faction this character belongs to
     */
    member_of_faction_id?: string;
    /**
     * Character name
     */
    name: string;
    /**
     * Tags associated with this character
     */
    tags?: Array<string>;
    /**
     * Last update timestamp
     */
    updated_at?: string;
};

/**
 * Link Update Request
 * Request to update link metadata between entities
 */
export type LinkUpdateRequest = {
    /**
     * Free-form description of the relationship
     */
    description?: string;
    /**
     * Whether the relationship is currently active
     */
    is_active?: boolean;
    /**
     * Additional flexible metadata as JSON
     */
    metadata?: {
        [key: string]: unknown;
    };
    /**
     * Type of relationship between entities
     */
    relationship_type?: string;
    /**
     * Relationship strength/importance (1-10)
     */
    strength?: number;
};

/**
 * Entity Faction
 * Faction entity in game entities list
 */
export type EntityFaction = {
    /**
     * Faction content
     */
    content?: string;
    /**
     * Faction content as plain text
     */
    content_plain_text?: string;
    /**
     * Creation timestamp
     */
    created_at?: string;
    /**
     * Faction ID
     */
    id: string;
    /**
     * Faction name
     */
    name: string;
    /**
     * Tags associated with this faction
     */
    tags?: Array<string>;
    /**
     * Last update timestamp
     */
    updated_at?: string;
};

/**
 * Character
 * A game character
 */
export type Character = {
    /**
     * Whether this character is alive
     */
    alive: boolean;
    /**
     * Character class
     */
    class: string;
    /**
     * Character content
     */
    content?: string;
    /**
     * Character content as plain text
     */
    content_plain_text?: string;
    /**
     * Creation timestamp
     */
    created_at?: string;
    /**
     * Role within the faction
     */
    faction_role?: string;
    /**
     * Associated game ID
     */
    game_id: string;
    /**
     * Character ID
     */
    id: string;
    /**
     * Character image URL
     */
    image_url?: string;
    /**
     * Character level
     */
    level: number;
    /**
     * ID of faction this character belongs to
     */
    member_of_faction_id?: string;
    /**
     * Character name
     */
    name: string;
    /**
     * Whether this character is pinned
     */
    pinned: boolean;
    /**
     * Character race
     */
    race?: string;
    /**
     * Tags associated with this character
     */
    tags?: Array<string>;
    /**
     * Last update timestamp
     */
    updated_at?: string;
    /**
     * Creator user ID
     */
    user_id: number;
};

/**
 * Signup Request
 * User registration credentials
 */
export type SignupRequest = {
    /**
     * User email
     */
    email: string;
    /**
     * User password
     */
    password: string;
};

/**
 * Quest Response
 * Response containing a single quest
 */
export type QuestResponse = {
    data?: Quest;
};

/**
 * Quest Links
 * Collections of entities linked to a quest
 */
export type QuestLinks = {
    /**
     * Linked characters with metadata
     */
    characters?: Array<LinkedCharacter>;
    /**
     * Linked factions with metadata
     */
    factions?: Array<LinkedFaction>;
    /**
     * Linked locations with metadata
     */
    locations?: Array<LinkedLocation>;
    /**
     * Linked notes with metadata
     */
    notes?: Array<LinkedNote>;
    /**
     * Linked quests with metadata
     */
    quests?: Array<LinkedQuest>;
};

/**
 * Character Links Response
 * Response containing character links
 */
export type CharacterLinksResponse = {
    data?: CharacterLinksData;
};

/**
 * Linked Faction
 * A faction with relationship metadata
 */
export type LinkedFaction = {
    /**
     * Faction content
     */
    content?: string;
    /**
     * Faction content as plain text
     */
    content_plain_text?: string;
    /**
     * Description of the relationship
     */
    description_meta?: string;
    /**
     * Faction ID
     */
    id: string;
    /**
     * Whether the relationship is active
     */
    is_active?: boolean;
    /**
     * Additional metadata
     */
    metadata?: {
        [key: string]: unknown;
    };
    /**
     * Faction name
     */
    name: string;
    /**
     * Type of relationship
     */
    relationship_type?: string;
    /**
     * Relationship strength (1-10)
     */
    strength?: number;
    /**
     * Faction tags
     */
    tags?: Array<unknown>;
};

/**
 * Faction Update Parameters
 * Parameters for updating an existing faction (partial updates supported)
 */
export type FactionUpdateParams = {
    /**
     * Faction content
     */
    content?: string;
    /**
     * Faction content as plain text
     */
    content_plain_text?: string;
    /**
     * Faction name
     */
    name?: string;
    /**
     * Whether this faction is pinned
     */
    pinned?: boolean;
    /**
     * Tags for this faction
     */
    tags?: Array<string>;
};

/**
 * Note Response
 * Response containing a single note
 */
export type NoteResponse = {
    data?: Note;
};

/**
 * Location Update Request
 * Location update parameters
 */
export type LocationUpdateRequest = {
    location: LocationUpdateParams;
};

/**
 * Note
 * A game note
 */
export type Note = {
    /**
     * Note content
     */
    content?: string;
    /**
     * Note content as plain text
     */
    content_plain_text?: string;
    /**
     * Creation timestamp
     */
    created_at?: string;
    /**
     * Associated game ID
     */
    game_id: string;
    /**
     * Note ID
     */
    id: string;
    /**
     * Note name
     */
    name: string;
    /**
     * Parent ID (note or other entity)
     */
    parent_id?: string;
    /**
     * Type of parent entity (character, quest, location, faction)
     */
    parent_type?: 'character' | 'quest' | 'location' | 'faction';
    /**
     * Whether this note is pinned
     */
    pinned: boolean;
    /**
     * Tags associated with this note
     */
    tags?: Array<string>;
    /**
     * Last update timestamp
     */
    updated_at?: string;
    /**
     * Author user ID
     */
    user_id: number;
};

/**
 * Note Create Request
 * Note creation parameters
 */
export type NoteCreateRequest = {
    note: NoteCreateParams;
};

/**
 * Faction
 * A game faction
 */
export type Faction = {
    /**
     * Faction content
     */
    content?: string;
    /**
     * Faction content as plain text
     */
    content_plain_text?: string;
    /**
     * Creation timestamp
     */
    created_at?: string;
    /**
     * Associated game ID
     */
    game_id: string;
    /**
     * Faction ID
     */
    id: string;
    /**
     * Faction name
     */
    name: string;
    /**
     * Whether this faction is pinned
     */
    pinned: boolean;
    /**
     * Tags associated with this faction
     */
    tags?: Array<string>;
    /**
     * Last update timestamp
     */
    updated_at?: string;
    /**
     * Creator user ID
     */
    user_id: number;
};

/**
 * Login Response
 * Successful login response
 */
export type LoginResponse = {
    /**
     * Session token (Base64 encoded)
     */
    token: string;
    user: User;
};

/**
 * User
 * User information
 */
export type User = {
    /**
     * Email confirmation timestamp
     */
    confirmed_at?: string;
    /**
     * User email
     */
    email: string;
    /**
     * User ID
     */
    id: number;
};

/**
 * Location Response
 * Response containing a single location
 */
export type LocationResponse = {
    data?: Location;
};

/**
 * Character Update Parameters
 * Parameters for updating an existing character (partial updates supported)
 */
export type CharacterUpdateParams = {
    /**
     * Whether this character is alive
     */
    alive?: boolean;
    /**
     * Character class
     */
    class?: string;
    /**
     * Character content
     */
    content?: string;
    /**
     * Character content as plain text
     */
    content_plain_text?: string;
    /**
     * Role within the faction
     */
    faction_role?: string;
    /**
     * Character image URL
     */
    image_url?: string;
    /**
     * Character level
     */
    level?: number;
    /**
     * ID of faction this character belongs to
     */
    member_of_faction_id?: string;
    /**
     * Character name
     */
    name?: string;
    /**
     * Whether this character is pinned
     */
    pinned?: boolean;
    /**
     * Character race
     */
    race?: string;
    /**
     * Tags for this character
     */
    tags?: Array<string>;
};

/**
 * Auth Status Response
 * Authentication status response
 */
export type AuthStatusResponse = {
    /**
     * Whether user is authenticated
     */
    authenticated: boolean;
    user?: User;
};

/**
 * Character Notes Tree Response
 * Response containing character notes tree
 */
export type CharacterNotesTreeResponse = {
    data?: CharacterNotesTreeData;
};

/**
 * Game Create Parameters
 * Parameters for creating a new game
 */
export type GameCreateParams = {
    /**
     * Game content
     */
    content?: string;
    /**
     * Game content as plain text
     */
    content_plain_text?: string;
    /**
     * Game name
     */
    name: string;
    /**
     * Game setting
     */
    setting?: string;
};

/**
 * Quest Links Response
 * Response containing quest links
 */
export type QuestLinksResponse = {
    data?: QuestLinksData;
};

/**
 * Login Request
 * Login credentials - either email/password or magic link token
 */
export type LoginRequest = {
    /**
     * User email
     */
    email?: string;
    /**
     * User password
     */
    password?: string;
    /**
     * Magic link token
     */
    token?: string;
};

/**
 * Faction Links Response
 * Response containing faction links
 */
export type FactionLinksResponse = {
    data?: FactionLinksData;
};

/**
 * Linked Character
 * A character with relationship metadata
 */
export type LinkedCharacter = {
    /**
     * Character content
     */
    content?: string;
    /**
     * Character content as plain text
     */
    content_plain_text?: string;
    /**
     * Description of the relationship
     */
    description_meta?: string;
    /**
     * Role within the faction
     */
    faction_role?: string;
    /**
     * Character ID
     */
    id: string;
    /**
     * Whether the relationship is active
     */
    is_active?: boolean;
    /**
     * ID of faction this character belongs to
     */
    member_of_faction_id?: string;
    /**
     * Additional metadata
     */
    metadata?: {
        [key: string]: unknown;
    };
    /**
     * Character name
     */
    name: string;
    /**
     * Type of relationship
     */
    relationship_type?: string;
    /**
     * Relationship strength (1-10)
     */
    strength?: number;
    /**
     * Character tags
     */
    tags?: Array<unknown>;
};

/**
 * Note Links Data
 * Links associated with a note
 */
export type NoteLinksData = {
    links?: NoteLinks;
    /**
     * Note ID
     */
    note_id: string;
    /**
     * Note name
     */
    note_name: string;
};

/**
 * Entities Response
 * Response containing all game entities
 */
export type EntitiesResponse = {
    data?: EntitiesData;
};

/**
 * Pinned Entities
 * Collection of pinned entities grouped by type
 */
export type PinnedEntities = {
    /**
     * Pinned characters
     */
    characters?: Array<Character>;
    /**
     * Pinned factions
     */
    factions?: Array<Faction>;
    /**
     * Pinned locations
     */
    locations?: Array<Location>;
    /**
     * Pinned notes
     */
    notes?: Array<Note>;
    /**
     * Pinned quests
     */
    quests?: Array<Quest>;
};

/**
 * Member
 * A game member
 */
export type Member = {
    /**
     * User email
     */
    email: string;
    /**
     * Join timestamp
     */
    joined_at?: string;
    /**
     * Member role
     */
    role: string;
    /**
     * User ID
     */
    user_id: number;
};

/**
 * Members Response
 * Response containing a list of game members
 */
export type MembersResponse = {
    /**
     * Response data
     */
    data?: Array<Member>;
};

/**
 * Note Update Parameters
 * Parameters for updating an existing note (partial updates supported)
 */
export type NoteUpdateParams = {
    /**
     * Note content
     */
    content?: string;
    /**
     * Note content as plain text
     */
    content_plain_text?: string;
    /**
     * Note name
     */
    name?: string;
    /**
     * Parent ID (note or other entity)
     */
    parent_id?: string | null;
    /**
     * Type of parent entity (character, quest, location, faction)
     */
    parent_type?: 'character' | 'quest' | 'location' | 'faction';
    /**
     * Whether this note is pinned
     */
    pinned?: boolean;
    /**
     * Tags for this note
     */
    tags?: Array<string>;
};

/**
 * Note Links
 * Collections of entities linked to a note
 */
export type NoteLinks = {
    /**
     * Linked characters with metadata
     */
    characters?: Array<LinkedCharacter>;
    /**
     * Linked factions with metadata
     */
    factions?: Array<LinkedFaction>;
    /**
     * Linked locations with metadata
     */
    locations?: Array<LinkedLocation>;
    /**
     * Linked notes with metadata
     */
    notes?: Array<LinkedNote>;
    /**
     * Linked quests with metadata
     */
    quests?: Array<LinkedQuest>;
};

/**
 * Character Notes Tree Data
 * Hierarchical tree of notes associated with a character
 */
export type CharacterNotesTreeData = {
    /**
     * Character ID
     */
    character_id: string;
    /**
     * Character name
     */
    character_name: string;
    /**
     * Hierarchical notes tree
     */
    notes_tree?: Array<NoteTreeNode>;
};

/**
 * Quest Create Parameters
 * Parameters for creating a new quest
 */
export type QuestCreateParams = {
    /**
     * Quest content
     */
    content?: string;
    /**
     * Quest content as plain text
     */
    content_plain_text?: string;
    /**
     * Quest name
     */
    name: string;
    /**
     * Parent quest ID for hierarchical structure
     */
    parent_id?: string;
    /**
     * Quest status
     */
    status?: 'preparing' | 'ready' | 'active' | 'paused' | 'completed' | 'cancelled';
    /**
     * Tags for this quest
     */
    tags?: Array<string>;
};

export type GetFactionLinksData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Faction ID
         */
        faction_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/factions/{faction_id}/links';
};

export type GetFactionLinksErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type GetFactionLinksError = GetFactionLinksErrors[keyof GetFactionLinksErrors];

export type GetFactionLinksResponses = {
    /**
     * Success
     */
    200: FactionLinksResponse;
};

export type GetFactionLinksResponse = GetFactionLinksResponses[keyof GetFactionLinksResponses];

export type CreateFactionLinkData = {
    /**
     * Link creation data
     */
    body: LinkRequest;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Faction ID
         */
        faction_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/factions/{faction_id}/links';
};

export type CreateFactionLinkErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
    /**
     * Unprocessable Entity
     */
    422: _Error;
};

export type CreateFactionLinkError = CreateFactionLinkErrors[keyof CreateFactionLinkErrors];

export type CreateFactionLinkResponses = {
    /**
     * Created
     */
    201: unknown;
};

export type ListLocationsData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/locations';
};

export type ListLocationsErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type ListLocationsError = ListLocationsErrors[keyof ListLocationsErrors];

export type ListLocationsResponses = {
    /**
     * Success
     */
    200: LocationsResponse;
};

export type ListLocationsResponse = ListLocationsResponses[keyof ListLocationsResponses];

export type CreateLocationData = {
    /**
     * Location to create
     */
    body: LocationCreateRequest;
    path: {
        /**
         * Game ID
         */
        game_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/locations';
};

export type CreateLocationErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
    /**
     * Unprocessable Entity
     */
    422: _Error;
};

export type CreateLocationError = CreateLocationErrors[keyof CreateLocationErrors];

export type CreateLocationResponses = {
    /**
     * Created
     */
    201: LocationResponse;
};

export type CreateLocationResponse = CreateLocationResponses[keyof CreateLocationResponses];

export type LogoutUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/logout';
};

export type LogoutUserErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
};

export type LogoutUserError = LogoutUserErrors[keyof LogoutUserErrors];

export type LogoutUserResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type LoginUserData = {
    /**
     * Login credentials
     */
    body: LoginRequest;
    path?: never;
    query?: never;
    url: '/api/auth/login';
};

export type LoginUserErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
};

export type LoginUserError = LoginUserErrors[keyof LoginUserErrors];

export type LoginUserResponses = {
    /**
     * Success
     */
    200: LoginResponse;
};

export type LoginUserResponse = LoginUserResponses[keyof LoginUserResponses];

export type DeleteLocationLinkData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Location ID
         */
        location_id: string;
        /**
         * Entity type
         */
        entity_type: 'character' | 'faction' | 'location' | 'quest' | 'note';
        /**
         * Entity ID
         */
        entity_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/locations/{location_id}/links/{entity_type}/{entity_id}';
};

export type DeleteLocationLinkErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type DeleteLocationLinkError = DeleteLocationLinkErrors[keyof DeleteLocationLinkErrors];

export type DeleteLocationLinkResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type UpdateLocationLinkData = {
    /**
     * Link update data
     */
    body: LinkUpdateRequest;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Location ID
         */
        location_id: string;
        /**
         * Entity type
         */
        entity_type: 'note' | 'character' | 'faction' | 'quest' | 'location';
        /**
         * Entity ID
         */
        entity_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/locations/{location_id}/links/{entity_type}/{entity_id}';
};

export type UpdateLocationLinkErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
    /**
     * Unprocessable Entity
     */
    422: _Error;
};

export type UpdateLocationLinkError = UpdateLocationLinkErrors[keyof UpdateLocationLinkErrors];

export type UpdateLocationLinkResponses = {
    /**
     * Success
     */
    200: {
        entity_id?: string;
        entity_type?: string;
        location_id?: string;
        message?: string;
        updated_at?: string;
    };
};

export type UpdateLocationLinkResponse = UpdateLocationLinkResponses[keyof UpdateLocationLinkResponses];

export type ListGameMembersData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/members';
};

export type ListGameMembersErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type ListGameMembersError = ListGameMembersErrors[keyof ListGameMembersErrors];

export type ListGameMembersResponses = {
    /**
     * Success
     */
    200: MembersResponse;
};

export type ListGameMembersResponse = ListGameMembersResponses[keyof ListGameMembersResponses];

export type AddGameMemberData = {
    body: {
        /**
         * User ID to add
         */
        user_id: number;
        /**
         * Member role (default: 'member')
         */
        role?: string;
    };
    path: {
        /**
         * Game ID
         */
        game_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/members';
};

export type AddGameMemberErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type AddGameMemberError = AddGameMemberErrors[keyof AddGameMemberErrors];

export type AddGameMemberResponses = {
    /**
     * Created
     */
    201: unknown;
};

export type GetCharacterNotesTreeData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Character ID
         */
        id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/characters/{id}/notes/tree';
};

export type GetCharacterNotesTreeErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type GetCharacterNotesTreeError = GetCharacterNotesTreeErrors[keyof GetCharacterNotesTreeErrors];

export type GetCharacterNotesTreeResponses = {
    /**
     * Success
     */
    200: CharacterNotesTreeResponse;
};

export type GetCharacterNotesTreeResponse = GetCharacterNotesTreeResponses[keyof GetCharacterNotesTreeResponses];

export type DeleteLocationData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Location ID
         */
        id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/locations/{id}';
};

export type DeleteLocationErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type DeleteLocationError = DeleteLocationErrors[keyof DeleteLocationErrors];

export type DeleteLocationResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetLocationData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Location ID
         */
        id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/locations/{id}';
};

export type GetLocationErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type GetLocationError = GetLocationErrors[keyof GetLocationErrors];

export type GetLocationResponses = {
    /**
     * Success
     */
    200: LocationResponse;
};

export type GetLocationResponse = GetLocationResponses[keyof GetLocationResponses];

export type UpdateLocationData = {
    /**
     * Location updates
     */
    body: LocationUpdateRequest;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Location ID
         */
        id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/locations/{id}';
};

export type UpdateLocationErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
    /**
     * Unprocessable Entity
     */
    422: _Error;
};

export type UpdateLocationError = UpdateLocationErrors[keyof UpdateLocationErrors];

export type UpdateLocationResponses = {
    /**
     * Success
     */
    200: LocationResponse;
};

export type UpdateLocationResponse = UpdateLocationResponses[keyof UpdateLocationResponses];

export type ListFactionsData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/factions';
};

export type ListFactionsErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type ListFactionsError = ListFactionsErrors[keyof ListFactionsErrors];

export type ListFactionsResponses = {
    /**
     * Success
     */
    200: FactionsResponse;
};

export type ListFactionsResponse = ListFactionsResponses[keyof ListFactionsResponses];

export type CreateFactionData = {
    /**
     * Faction to create
     */
    body: FactionCreateRequest;
    path: {
        /**
         * Game ID
         */
        game_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/factions';
};

export type CreateFactionErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
    /**
     * Unprocessable Entity
     */
    422: _Error;
};

export type CreateFactionError = CreateFactionErrors[keyof CreateFactionErrors];

export type CreateFactionResponses = {
    /**
     * Created
     */
    201: FactionResponse;
};

export type CreateFactionResponse = CreateFactionResponses[keyof CreateFactionResponses];

export type DeleteCharacterLinkData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Character ID
         */
        character_id: string;
        /**
         * Entity type
         */
        entity_type: 'note' | 'faction' | 'location' | 'quest' | 'character';
        /**
         * Entity ID
         */
        entity_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/characters/{character_id}/links/{entity_type}/{entity_id}';
};

export type DeleteCharacterLinkErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type DeleteCharacterLinkError = DeleteCharacterLinkErrors[keyof DeleteCharacterLinkErrors];

export type DeleteCharacterLinkResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type UpdateCharacterLinkData = {
    /**
     * Link update data
     */
    body: LinkUpdateRequest;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Character ID
         */
        character_id: string;
        /**
         * Entity type
         */
        entity_type: 'note' | 'faction' | 'location' | 'quest' | 'character';
        /**
         * Entity ID
         */
        entity_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/characters/{character_id}/links/{entity_type}/{entity_id}';
};

export type UpdateCharacterLinkErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
    /**
     * Unprocessable Entity
     */
    422: _Error;
};

export type UpdateCharacterLinkError = UpdateCharacterLinkErrors[keyof UpdateCharacterLinkErrors];

export type UpdateCharacterLinkResponses = {
    /**
     * Success
     */
    200: {
        character_id?: string;
        entity_id?: string;
        entity_type?: string;
        message?: string;
        updated_at?: string;
    };
};

export type UpdateCharacterLinkResponse = UpdateCharacterLinkResponses[keyof UpdateCharacterLinkResponses];

export type ListGameEntitiesData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/links';
};

export type ListGameEntitiesErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type ListGameEntitiesError = ListGameEntitiesErrors[keyof ListGameEntitiesErrors];

export type ListGameEntitiesResponses = {
    /**
     * Success
     */
    200: EntitiesResponse;
};

export type ListGameEntitiesResponse = ListGameEntitiesResponses[keyof ListGameEntitiesResponses];

export type GetNoteLinksData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Note ID
         */
        note_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/notes/{note_id}/links';
};

export type GetNoteLinksErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type GetNoteLinksError = GetNoteLinksErrors[keyof GetNoteLinksErrors];

export type GetNoteLinksResponses = {
    /**
     * Success
     */
    200: NoteLinksResponse;
};

export type GetNoteLinksResponse = GetNoteLinksResponses[keyof GetNoteLinksResponses];

export type CreateNoteLinkData = {
    /**
     * Link creation data
     */
    body: LinkRequest;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Note ID
         */
        note_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/notes/{note_id}/links';
};

export type CreateNoteLinkErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Not Found
     */
    404: _Error;
    /**
     * Unprocessable Entity
     */
    422: _Error;
};

export type CreateNoteLinkError = CreateNoteLinkErrors[keyof CreateNoteLinkErrors];

export type CreateNoteLinkResponses = {
    /**
     * Created
     */
    201: {
        entity_id?: string;
        entity_type?: string;
        message?: string;
        note_id?: string;
    };
};

export type CreateNoteLinkResponse = CreateNoteLinkResponses[keyof CreateNoteLinkResponses];

export type GetLocationTreeData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/locations/tree';
};

export type GetLocationTreeErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type GetLocationTreeError = GetLocationTreeErrors[keyof GetLocationTreeErrors];

export type GetLocationTreeResponses = {
    /**
     * Success
     */
    200: LocationTreeResponse;
};

export type GetLocationTreeResponse = GetLocationTreeResponses[keyof GetLocationTreeResponses];

export type RemoveCharacterPrimaryFactionData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Character ID
         */
        character_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/characters/{character_id}/primary-faction';
};

export type RemoveCharacterPrimaryFactionErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type RemoveCharacterPrimaryFactionError = RemoveCharacterPrimaryFactionErrors[keyof RemoveCharacterPrimaryFactionErrors];

export type RemoveCharacterPrimaryFactionResponses = {
    /**
     * Success
     */
    200: CharacterResponse;
};

export type RemoveCharacterPrimaryFactionResponse = RemoveCharacterPrimaryFactionResponses[keyof RemoveCharacterPrimaryFactionResponses];

export type GetCharacterPrimaryFactionData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Character ID
         */
        character_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/characters/{character_id}/primary-faction';
};

export type GetCharacterPrimaryFactionErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type GetCharacterPrimaryFactionError = GetCharacterPrimaryFactionErrors[keyof GetCharacterPrimaryFactionErrors];

export type GetCharacterPrimaryFactionResponses = {
    /**
     * Success
     */
    200: CharacterPrimaryFactionResponse;
};

export type GetCharacterPrimaryFactionResponse = GetCharacterPrimaryFactionResponses[keyof GetCharacterPrimaryFactionResponses];

export type SetCharacterPrimaryFactionData = {
    /**
     * Primary faction data
     */
    body: SetPrimaryFactionRequest;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Character ID
         */
        character_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/characters/{character_id}/primary-faction';
};

export type SetCharacterPrimaryFactionErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
    /**
     * Unprocessable Entity
     */
    422: _Error;
};

export type SetCharacterPrimaryFactionError = SetCharacterPrimaryFactionErrors[keyof SetCharacterPrimaryFactionErrors];

export type SetCharacterPrimaryFactionResponses = {
    /**
     * Success
     */
    200: CharacterResponse;
};

export type SetCharacterPrimaryFactionResponse = SetCharacterPrimaryFactionResponses[keyof SetCharacterPrimaryFactionResponses];

export type PinCharacterData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Character ID
         */
        character_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/characters/{character_id}/pin';
};

export type PinCharacterErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type PinCharacterError = PinCharacterErrors[keyof PinCharacterErrors];

export type PinCharacterResponses = {
    /**
     * Success
     */
    200: CharacterResponse;
};

export type PinCharacterResponse = PinCharacterResponses[keyof PinCharacterResponses];

export type GetFactionMembersData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Faction ID
         */
        faction_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/factions/{faction_id}/members';
};

export type GetFactionMembersErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type GetFactionMembersError = GetFactionMembersErrors[keyof GetFactionMembersErrors];

export type GetFactionMembersResponses = {
    /**
     * Success
     */
    200: FactionMembersResponse;
};

export type GetFactionMembersResponse = GetFactionMembersResponses[keyof GetFactionMembersResponses];

export type ListQuestsData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/quests';
};

export type ListQuestsErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type ListQuestsError = ListQuestsErrors[keyof ListQuestsErrors];

export type ListQuestsResponses = {
    /**
     * Success
     */
    200: QuestsResponse;
};

export type ListQuestsResponse = ListQuestsResponses[keyof ListQuestsResponses];

export type CreateQuestData = {
    /**
     * Quest to create
     */
    body: QuestCreateRequest;
    path: {
        /**
         * Game ID
         */
        game_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/quests';
};

export type CreateQuestErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
    /**
     * Unprocessable Entity
     */
    422: _Error;
};

export type CreateQuestError = CreateQuestErrors[keyof CreateQuestErrors];

export type CreateQuestResponses = {
    /**
     * Created
     */
    201: QuestResponse;
};

export type CreateQuestResponse = CreateQuestResponses[keyof CreateQuestResponses];

export type DeleteNoteData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Note ID
         */
        id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/notes/{id}';
};

export type DeleteNoteErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type DeleteNoteError = DeleteNoteErrors[keyof DeleteNoteErrors];

export type DeleteNoteResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetNoteData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Note ID
         */
        id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/notes/{id}';
};

export type GetNoteErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type GetNoteError = GetNoteErrors[keyof GetNoteErrors];

export type GetNoteResponses = {
    /**
     * Success
     */
    200: NoteResponse;
};

export type GetNoteResponse = GetNoteResponses[keyof GetNoteResponses];

export type UpdateNoteData = {
    /**
     * Note parameters
     */
    body: NoteUpdateRequest;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Note ID
         */
        id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/notes/{id}';
};

export type UpdateNoteErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Not Found
     */
    404: _Error;
    /**
     * Unprocessable Entity
     */
    422: _Error;
};

export type UpdateNoteError = UpdateNoteErrors[keyof UpdateNoteErrors];

export type UpdateNoteResponses = {
    /**
     * Success
     */
    200: NoteResponse;
};

export type UpdateNoteResponse = UpdateNoteResponses[keyof UpdateNoteResponses];

export type GetCharacterLinksData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Character ID
         */
        character_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/characters/{character_id}/links';
};

export type GetCharacterLinksErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type GetCharacterLinksError = GetCharacterLinksErrors[keyof GetCharacterLinksErrors];

export type GetCharacterLinksResponses = {
    /**
     * Success
     */
    200: CharacterLinksResponse;
};

export type GetCharacterLinksResponse = GetCharacterLinksResponses[keyof GetCharacterLinksResponses];

export type CreateCharacterLinkData = {
    /**
     * Link creation data
     */
    body: LinkRequest;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Character ID
         */
        character_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/characters/{character_id}/links';
};

export type CreateCharacterLinkErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
    /**
     * Unprocessable Entity
     */
    422: _Error;
};

export type CreateCharacterLinkError = CreateCharacterLinkErrors[keyof CreateCharacterLinkErrors];

export type CreateCharacterLinkResponses = {
    /**
     * Created
     */
    201: unknown;
};

export type ListCharactersData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/characters';
};

export type ListCharactersErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type ListCharactersError = ListCharactersErrors[keyof ListCharactersErrors];

export type ListCharactersResponses = {
    /**
     * Success
     */
    200: CharactersResponse;
};

export type ListCharactersResponse = ListCharactersResponses[keyof ListCharactersResponses];

export type CreateCharacterData = {
    /**
     * Character to create
     */
    body: CharacterCreateRequest;
    path: {
        /**
         * Game ID
         */
        game_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/characters';
};

export type CreateCharacterErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
    /**
     * Unprocessable Entity
     */
    422: _Error;
};

export type CreateCharacterError = CreateCharacterErrors[keyof CreateCharacterErrors];

export type CreateCharacterResponses = {
    /**
     * Created
     */
    201: CharacterResponse;
};

export type CreateCharacterResponse = CreateCharacterResponses[keyof CreateCharacterResponses];

export type DeleteGameData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        id: string;
    };
    query?: never;
    url: '/api/games/{id}';
};

export type DeleteGameErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type DeleteGameError = DeleteGameErrors[keyof DeleteGameErrors];

export type DeleteGameResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetGameData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        id: string;
    };
    query?: never;
    url: '/api/games/{id}';
};

export type GetGameErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type GetGameError = GetGameErrors[keyof GetGameErrors];

export type GetGameResponses = {
    /**
     * Success
     */
    200: GameResponse;
};

export type GetGameResponse = GetGameResponses[keyof GetGameResponses];

export type UpdateGameData = {
    /**
     * Game parameters
     */
    body: GameUpdateRequest;
    path: {
        /**
         * Game ID
         */
        id: string;
    };
    query?: never;
    url: '/api/games/{id}';
};

export type UpdateGameErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Not Found
     */
    404: _Error;
    /**
     * Unprocessable Entity
     */
    422: _Error;
};

export type UpdateGameError = UpdateGameErrors[keyof UpdateGameErrors];

export type UpdateGameResponses = {
    /**
     * Success
     */
    200: GameResponse;
};

export type UpdateGameResponse = UpdateGameResponses[keyof UpdateGameResponses];

export type GetGameEntityTreeData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
    };
    query?: {
        /**
         * Maximum depth to traverse (default: 3, max: 10)
         */
        depth?: number;
        /**
         * Entity type to start from (character, faction, location, quest, note)
         */
        start_entity_type?: string;
        /**
         * Entity ID to start from (requires start_entity_type)
         */
        start_entity_id?: string;
    };
    url: '/api/games/{game_id}/tree';
};

export type GetGameEntityTreeErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type GetGameEntityTreeError = GetGameEntityTreeErrors[keyof GetGameEntityTreeErrors];

export type GetGameEntityTreeResponses = {
    /**
     * Success
     */
    200: EntityTreeResponse;
};

export type GetGameEntityTreeResponse = GetGameEntityTreeResponses[keyof GetGameEntityTreeResponses];

export type UnpinCharacterData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Character ID
         */
        character_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/characters/{character_id}/unpin';
};

export type UnpinCharacterErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type UnpinCharacterError = UnpinCharacterErrors[keyof UnpinCharacterErrors];

export type UnpinCharacterResponses = {
    /**
     * Success
     */
    200: CharacterResponse;
};

export type UnpinCharacterResponse = UnpinCharacterResponses[keyof UnpinCharacterResponses];

export type SignupUserData = {
    /**
     * Signup credentials
     */
    body: SignupRequest;
    path?: never;
    query?: never;
    url: '/api/auth/signup';
};

export type SignupUserErrors = {
    /**
     * Unprocessable Entity
     */
    422: _Error;
};

export type SignupUserError = SignupUserErrors[keyof SignupUserErrors];

export type SignupUserResponses = {
    /**
     * Created
     */
    201: LoginResponse;
};

export type SignupUserResponse = SignupUserResponses[keyof SignupUserResponses];

export type GetAuthStatusData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/status';
};

export type GetAuthStatusErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
};

export type GetAuthStatusError = GetAuthStatusErrors[keyof GetAuthStatusErrors];

export type GetAuthStatusResponses = {
    /**
     * Success
     */
    200: AuthStatusResponse;
};

export type GetAuthStatusResponse = GetAuthStatusResponses[keyof GetAuthStatusResponses];

export type DeleteQuestData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Quest ID
         */
        id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/quests/{id}';
};

export type DeleteQuestErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type DeleteQuestError = DeleteQuestErrors[keyof DeleteQuestErrors];

export type DeleteQuestResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetQuestData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Quest ID
         */
        id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/quests/{id}';
};

export type GetQuestErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type GetQuestError = GetQuestErrors[keyof GetQuestErrors];

export type GetQuestResponses = {
    /**
     * Success
     */
    200: QuestResponse;
};

export type GetQuestResponse = GetQuestResponses[keyof GetQuestResponses];

export type UpdateQuestData = {
    /**
     * Quest updates
     */
    body: QuestUpdateRequest;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Quest ID
         */
        id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/quests/{id}';
};

export type UpdateQuestErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
    /**
     * Unprocessable Entity
     */
    422: _Error;
};

export type UpdateQuestError = UpdateQuestErrors[keyof UpdateQuestErrors];

export type UpdateQuestResponses = {
    /**
     * Success
     */
    200: QuestResponse;
};

export type UpdateQuestResponse = UpdateQuestResponses[keyof UpdateQuestResponses];

export type GetLocationLinksData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Location ID
         */
        location_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/locations/{location_id}/links';
};

export type GetLocationLinksErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type GetLocationLinksError = GetLocationLinksErrors[keyof GetLocationLinksErrors];

export type GetLocationLinksResponses = {
    /**
     * Success
     */
    200: LocationLinksResponse;
};

export type GetLocationLinksResponse = GetLocationLinksResponses[keyof GetLocationLinksResponses];

export type CreateLocationLinkData = {
    /**
     * Link creation data
     */
    body: LinkRequest;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Location ID
         */
        location_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/locations/{location_id}/links';
};

export type CreateLocationLinkErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
    /**
     * Unprocessable Entity
     */
    422: _Error;
};

export type CreateLocationLinkError = CreateLocationLinkErrors[keyof CreateLocationLinkErrors];

export type CreateLocationLinkResponses = {
    /**
     * Created
     */
    201: unknown;
};

export type DeleteNoteLinkData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Note ID
         */
        note_id: string;
        /**
         * Entity type
         */
        entity_type: 'character' | 'faction' | 'location' | 'quest' | 'note';
        /**
         * Entity ID
         */
        entity_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/notes/{note_id}/links/{entity_type}/{entity_id}';
};

export type DeleteNoteLinkErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Not Found
     */
    404: _Error;
    /**
     * Unprocessable Entity
     */
    422: _Error;
};

export type DeleteNoteLinkError = DeleteNoteLinkErrors[keyof DeleteNoteLinkErrors];

export type DeleteNoteLinkResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type UpdateNoteLinkData = {
    /**
     * Link update data
     */
    body: LinkUpdateRequest;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Note ID
         */
        note_id: string;
        /**
         * Entity type
         */
        entity_type: 'character' | 'faction' | 'location' | 'quest' | 'note';
        /**
         * Entity ID
         */
        entity_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/notes/{note_id}/links/{entity_type}/{entity_id}';
};

export type UpdateNoteLinkErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Not Found
     */
    404: _Error;
    /**
     * Unprocessable Entity
     */
    422: _Error;
};

export type UpdateNoteLinkError = UpdateNoteLinkErrors[keyof UpdateNoteLinkErrors];

export type UpdateNoteLinkResponses = {
    /**
     * Success
     */
    200: {
        entity_id?: string;
        entity_type?: string;
        message?: string;
        note_id?: string;
        updated_at?: string;
    };
};

export type UpdateNoteLinkResponse = UpdateNoteLinkResponses[keyof UpdateNoteLinkResponses];

export type DeleteCharacterData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Character ID
         */
        id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/characters/{id}';
};

export type DeleteCharacterErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type DeleteCharacterError = DeleteCharacterErrors[keyof DeleteCharacterErrors];

export type DeleteCharacterResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetCharacterData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Character ID
         */
        id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/characters/{id}';
};

export type GetCharacterErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type GetCharacterError = GetCharacterErrors[keyof GetCharacterErrors];

export type GetCharacterResponses = {
    /**
     * Success
     */
    200: CharacterResponse;
};

export type GetCharacterResponse = GetCharacterResponses[keyof GetCharacterResponses];

export type UpdateCharacterData = {
    /**
     * Character updates
     */
    body: CharacterUpdateRequest;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Character ID
         */
        id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/characters/{id}';
};

export type UpdateCharacterErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
    /**
     * Unprocessable Entity
     */
    422: _Error;
};

export type UpdateCharacterError = UpdateCharacterErrors[keyof UpdateCharacterErrors];

export type UpdateCharacterResponses = {
    /**
     * Success
     */
    200: CharacterResponse;
};

export type UpdateCharacterResponse = UpdateCharacterResponses[keyof UpdateCharacterResponses];

export type GetQuestLinksData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Quest ID
         */
        quest_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/quests/{quest_id}/links';
};

export type GetQuestLinksErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type GetQuestLinksError = GetQuestLinksErrors[keyof GetQuestLinksErrors];

export type GetQuestLinksResponses = {
    /**
     * Success
     */
    200: QuestLinksResponse;
};

export type GetQuestLinksResponse = GetQuestLinksResponses[keyof GetQuestLinksResponses];

export type CreateQuestLinkData = {
    /**
     * Link creation data
     */
    body: LinkRequest;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Quest ID
         */
        quest_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/quests/{quest_id}/links';
};

export type CreateQuestLinkErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
    /**
     * Unprocessable Entity
     */
    422: _Error;
};

export type CreateQuestLinkError = CreateQuestLinkErrors[keyof CreateQuestLinkErrors];

export type CreateQuestLinkResponses = {
    /**
     * Created
     */
    201: unknown;
};

export type DeleteFactionData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Faction ID
         */
        id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/factions/{id}';
};

export type DeleteFactionErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type DeleteFactionError = DeleteFactionErrors[keyof DeleteFactionErrors];

export type DeleteFactionResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetFactionData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Faction ID
         */
        id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/factions/{id}';
};

export type GetFactionErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type GetFactionError = GetFactionErrors[keyof GetFactionErrors];

export type GetFactionResponses = {
    /**
     * Success
     */
    200: FactionResponse;
};

export type GetFactionResponse = GetFactionResponses[keyof GetFactionResponses];

export type UpdateFactionData = {
    /**
     * Faction updates
     */
    body: FactionUpdateRequest;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Faction ID
         */
        id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/factions/{id}';
};

export type UpdateFactionErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
    /**
     * Unprocessable Entity
     */
    422: _Error;
};

export type UpdateFactionError = UpdateFactionErrors[keyof UpdateFactionErrors];

export type UpdateFactionResponses = {
    /**
     * Success
     */
    200: FactionResponse;
};

export type UpdateFactionResponse = UpdateFactionResponses[keyof UpdateFactionResponses];

export type RemoveGameMemberData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * User ID to remove
         */
        user_id: number;
    };
    query?: never;
    url: '/api/games/{game_id}/members/{user_id}';
};

export type RemoveGameMemberErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type RemoveGameMemberError = RemoveGameMemberErrors[keyof RemoveGameMemberErrors];

export type RemoveGameMemberResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type DeleteFactionLinkData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Faction ID
         */
        faction_id: string;
        /**
         * Entity type
         */
        entity_type: 'character' | 'location' | 'quest' | 'note' | 'faction';
        /**
         * Entity ID
         */
        entity_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/factions/{faction_id}/links/{entity_type}/{entity_id}';
};

export type DeleteFactionLinkErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type DeleteFactionLinkError = DeleteFactionLinkErrors[keyof DeleteFactionLinkErrors];

export type DeleteFactionLinkResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type UpdateFactionLinkData = {
    /**
     * Link update data
     */
    body: LinkUpdateRequest;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Faction ID
         */
        faction_id: string;
        /**
         * Entity type
         */
        entity_type: 'note' | 'character' | 'location' | 'quest' | 'faction';
        /**
         * Entity ID
         */
        entity_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/factions/{faction_id}/links/{entity_type}/{entity_id}';
};

export type UpdateFactionLinkErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
    /**
     * Unprocessable Entity
     */
    422: _Error;
};

export type UpdateFactionLinkError = UpdateFactionLinkErrors[keyof UpdateFactionLinkErrors];

export type UpdateFactionLinkResponses = {
    /**
     * Success
     */
    200: {
        entity_id?: string;
        entity_type?: string;
        faction_id?: string;
        message?: string;
        updated_at?: string;
    };
};

export type UpdateFactionLinkResponse = UpdateFactionLinkResponses[keyof UpdateFactionLinkResponses];

export type ListNotesData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/notes';
};

export type ListNotesErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type ListNotesError = ListNotesErrors[keyof ListNotesErrors];

export type ListNotesResponses = {
    /**
     * Success
     */
    200: NotesResponse;
};

export type ListNotesResponse = ListNotesResponses[keyof ListNotesResponses];

export type CreateNoteData = {
    /**
     * Note parameters
     */
    body: NoteCreateRequest;
    path: {
        /**
         * Game ID
         */
        game_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/notes';
};

export type CreateNoteErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Not Found
     */
    404: _Error;
    /**
     * Unprocessable Entity
     */
    422: _Error;
};

export type CreateNoteError = CreateNoteErrors[keyof CreateNoteErrors];

export type CreateNoteResponses = {
    /**
     * Created
     */
    201: NoteResponse;
};

export type CreateNoteResponse = CreateNoteResponses[keyof CreateNoteResponses];

export type ListPinnedEntitiesData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/pinned';
};

export type ListPinnedEntitiesErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type ListPinnedEntitiesError = ListPinnedEntitiesErrors[keyof ListPinnedEntitiesErrors];

export type ListPinnedEntitiesResponses = {
    /**
     * Success
     */
    200: PinnedEntitiesResponse;
};

export type ListPinnedEntitiesResponse = ListPinnedEntitiesResponses[keyof ListPinnedEntitiesResponses];

export type ListGamesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/games';
};

export type ListGamesErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
};

export type ListGamesError = ListGamesErrors[keyof ListGamesErrors];

export type ListGamesResponses = {
    /**
     * Success
     */
    200: GamesResponse;
};

export type ListGamesResponse = ListGamesResponses[keyof ListGamesResponses];

export type CreateGameData = {
    /**
     * Game parameters
     */
    body: GameCreateRequest;
    path?: never;
    query?: never;
    url: '/api/games';
};

export type CreateGameErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Unprocessable Entity
     */
    422: _Error;
};

export type CreateGameError = CreateGameErrors[keyof CreateGameErrors];

export type CreateGameResponses = {
    /**
     * Created
     */
    201: GameResponse;
};

export type CreateGameResponse = CreateGameResponses[keyof CreateGameResponses];

export type DeleteQuestLinkData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Quest ID
         */
        quest_id: string;
        /**
         * Entity type
         */
        entity_type: 'character' | 'faction' | 'location' | 'note' | 'quest';
        /**
         * Entity ID
         */
        entity_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/quests/{quest_id}/links/{entity_type}/{entity_id}';
};

export type DeleteQuestLinkErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type DeleteQuestLinkError = DeleteQuestLinkErrors[keyof DeleteQuestLinkErrors];

export type DeleteQuestLinkResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type UpdateQuestLinkData = {
    /**
     * Link update data
     */
    body: LinkUpdateRequest;
    path: {
        /**
         * Game ID
         */
        game_id: string;
        /**
         * Quest ID
         */
        quest_id: string;
        /**
         * Entity type
         */
        entity_type: 'note' | 'character' | 'faction' | 'location' | 'quest';
        /**
         * Entity ID
         */
        entity_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/quests/{quest_id}/links/{entity_type}/{entity_id}';
};

export type UpdateQuestLinkErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
    /**
     * Unprocessable Entity
     */
    422: _Error;
};

export type UpdateQuestLinkError = UpdateQuestLinkErrors[keyof UpdateQuestLinkErrors];

export type UpdateQuestLinkResponses = {
    /**
     * Success
     */
    200: {
        entity_id?: string;
        entity_type?: string;
        message?: string;
        quest_id?: string;
        updated_at?: string;
    };
};

export type UpdateQuestLinkResponse = UpdateQuestLinkResponses[keyof UpdateQuestLinkResponses];

export type GetQuestTreeData = {
    body?: never;
    path: {
        /**
         * Game ID
         */
        game_id: string;
    };
    query?: never;
    url: '/api/games/{game_id}/quests/tree';
};

export type GetQuestTreeErrors = {
    /**
     * Unauthorized
     */
    401: _Error;
    /**
     * Forbidden
     */
    403: _Error;
    /**
     * Not Found
     */
    404: _Error;
};

export type GetQuestTreeError = GetQuestTreeErrors[keyof GetQuestTreeErrors];

export type GetQuestTreeResponses = {
    /**
     * Success
     */
    200: QuestTreeResponse;
};

export type GetQuestTreeResponse = GetQuestTreeResponses[keyof GetQuestTreeResponses];

export type ClientOptions = {
    baseUrl: 'https://gamemastercore-production.up.railway.app' | (string & {});
};