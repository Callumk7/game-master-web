// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

/**
 * Character Create Parameters
 * Parameters for creating a new character
 */
export const zCharacterCreateParams = z.object({
    alive: z.optional(z.boolean()),
    class: z.string(),
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    faction_role: z.optional(z.string()),
    image_url: z.optional(z.string()),
    level: z.int(),
    member_of_faction_id: z.optional(z.uuid()),
    name: z.string(),
    race: z.optional(z.string()),
    tags: z.optional(z.array(z.string()))
});

/**
 * Entity Character
 * Character entity in game entities list
 */
export const zEntityCharacter = z.object({
    class: z.string(),
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    created_at: z.optional(z.string()),
    faction_role: z.optional(z.string()),
    id: z.uuid(),
    image_url: z.optional(z.string()),
    level: z.int(),
    member_of_faction_id: z.optional(z.uuid()),
    name: z.string(),
    tags: z.optional(z.array(z.string())),
    updated_at: z.optional(z.string())
});

/**
 * Entity Faction
 * Faction entity in game entities list
 */
export const zEntityFaction = z.object({
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    created_at: z.optional(z.string()),
    id: z.uuid(),
    name: z.string(),
    tags: z.optional(z.array(z.string())),
    updated_at: z.optional(z.string())
});

/**
 * Entity Location
 * Location entity in game entities list
 */
export const zEntityLocation = z.object({
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    created_at: z.optional(z.string()),
    has_parent: z.boolean(),
    id: z.uuid(),
    name: z.string(),
    tags: z.optional(z.array(z.string())),
    type: z.enum([
        'continent',
        'nation',
        'region',
        'city',
        'settlement',
        'building',
        'complex'
    ]),
    updated_at: z.optional(z.string())
});

/**
 * Entity Note
 * Note entity in game entities list
 */
export const zEntityNote = z.object({
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    created_at: z.optional(z.string()),
    id: z.uuid(),
    name: z.string(),
    tags: z.optional(z.array(z.string())),
    updated_at: z.optional(z.string())
});

/**
 * Entity Quest
 * Quest entity in game entities list
 */
export const zEntityQuest = z.object({
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    created_at: z.optional(z.string()),
    id: z.uuid(),
    name: z.string(),
    parent_id: z.optional(z.uuid()),
    status: z.enum([
        'preparing',
        'ready',
        'active',
        'paused',
        'completed',
        'cancelled'
    ]),
    tags: z.optional(z.array(z.string())),
    updated_at: z.optional(z.string())
});

/**
 * Entities
 * Collection of game entities
 */
export const zEntities = z.object({
    characters: z.optional(z.array(zEntityCharacter)),
    factions: z.optional(z.array(zEntityFaction)),
    locations: z.optional(z.array(zEntityLocation)),
    notes: z.optional(z.array(zEntityNote)),
    quests: z.optional(z.array(zEntityQuest))
});

/**
 * Error Details
 * Detailed error information
 */
export const zErrorDetails = z.record(z.string(), z.unknown());

/**
 * Location Create Parameters
 * Parameters for creating a new location
 */
export const zLocationCreateParams = z.object({
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    name: z.string(),
    parent_id: z.optional(z.uuid()),
    tags: z.optional(z.array(z.string())),
    type: z.enum([
        'continent',
        'nation',
        'region',
        'city',
        'settlement',
        'building',
        'complex'
    ])
});

/**
 * Linked Location
 * A location with relationship metadata
 */
export const zLinkedLocation = z.object({
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    description_meta: z.optional(z.string()),
    id: z.uuid(),
    is_active: z.optional(z.boolean()),
    metadata: z.optional(z.record(z.string(), z.unknown())),
    name: z.string(),
    relationship_type: z.optional(z.string()),
    strength: z.optional(z.int()),
    tags: z.optional(z.array(z.unknown()))
});

/**
 * Entity Tree Node
 * A single node in the entity relationship tree
 */
export const zEntityTreeNode = z.object({
    get children() {
        return z.array(z.lazy((): any => {
            return zEntityTreeNode;
        }));
    },
    description: z.optional(z.string()),
    id: z.uuid(),
    is_active: z.optional(z.boolean()),
    metadata: z.optional(z.record(z.string(), z.unknown())),
    name: z.string(),
    relationship_type: z.optional(z.string()),
    strength: z.optional(z.int().gte(1).lte(5)),
    type: z.enum([
        'character',
        'faction',
        'location',
        'quest',
        'note'
    ])
});

/**
 * Entity Tree Data
 * Entity relationship tree data grouped by entity types or single tree
 */
export const zEntityTreeData = z.object({
    characters: z.optional(z.array(zEntityTreeNode)),
    factions: z.optional(z.array(zEntityTreeNode)),
    locations: z.optional(z.array(zEntityTreeNode)),
    notes: z.optional(z.array(zEntityTreeNode)),
    quests: z.optional(z.array(zEntityTreeNode))
});

/**
 * Game Update Parameters
 * Parameters for updating an existing game (partial updates supported)
 */
export const zGameUpdateParams = z.object({
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    name: z.optional(z.string()),
    setting: z.optional(z.string())
});

/**
 * Quest Update Parameters
 * Parameters for updating an existing quest (partial updates supported)
 */
export const zQuestUpdateParams = z.object({
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    name: z.optional(z.string()),
    parent_id: z.optional(z.uuid()),
    pinned: z.optional(z.boolean()),
    status: z.optional(z.enum([
        'preparing',
        'ready',
        'active',
        'paused',
        'completed',
        'cancelled'
    ])),
    tags: z.optional(z.array(z.string()))
});

/**
 * Quest Update Request
 * Quest update parameters
 */
export const zQuestUpdateRequest = z.object({
    quest: zQuestUpdateParams
});

/**
 * Character
 * A game character
 */
export const zCharacter = z.object({
    alive: z.boolean(),
    class: z.string(),
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    created_at: z.optional(z.string()),
    faction_role: z.optional(z.string()),
    game_id: z.uuid(),
    id: z.uuid(),
    image_url: z.optional(z.string()),
    level: z.int(),
    member_of_faction_id: z.optional(z.uuid()),
    name: z.string(),
    pinned: z.boolean(),
    race: z.optional(z.string()),
    tags: z.optional(z.array(z.string())),
    updated_at: z.optional(z.string()),
    user_id: z.int()
});

/**
 * Characters Response
 * Response containing a list of characters
 */
export const zCharactersResponse = z.object({
    data: z.optional(z.array(zCharacter))
});

/**
 * Faction Update Parameters
 * Parameters for updating an existing faction (partial updates supported)
 */
export const zFactionUpdateParams = z.object({
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    name: z.optional(z.string()),
    pinned: z.optional(z.boolean()),
    tags: z.optional(z.array(z.string()))
});

/**
 * Faction Update Request
 * Faction update parameters
 */
export const zFactionUpdateRequest = z.object({
    faction: zFactionUpdateParams
});

/**
 * Error
 * Error response
 */
export const zError = z.object({
    errors: z.optional(zErrorDetails)
});

/**
 * Quest Tree Node
 * A node in the quest hierarchy tree
 */
export const zQuestTreeNode = z.object({
    get children(): z.ZodOptional {
        return z.optional(z.array(z.lazy((): any => {
            return zQuestTreeNode;
        })));
    },
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    entity_type: z.enum([
        'quest'
    ]),
    id: z.uuid(),
    name: z.string(),
    parent_id: z.optional(z.uuid()),
    status: z.enum([
        'preparing',
        'ready',
        'active',
        'paused',
        'completed',
        'cancelled'
    ]),
    tags: z.optional(z.array(z.string()))
});

/**
 * Faction
 * A game faction
 */
export const zFaction = z.object({
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    created_at: z.optional(z.string()),
    game_id: z.uuid(),
    id: z.uuid(),
    name: z.string(),
    pinned: z.boolean(),
    tags: z.optional(z.array(z.string())),
    updated_at: z.optional(z.string()),
    user_id: z.int()
});

/**
 * Character Primary Faction Data
 * Primary faction information for a character
 */
export const zCharacterPrimaryFactionData = z.object({
    character_id: z.uuid(),
    faction: zFaction,
    role: z.string()
});

/**
 * Character Primary Faction Response
 * Response containing character's primary faction data
 */
export const zCharacterPrimaryFactionResponse = z.object({
    data: z.optional(zCharacterPrimaryFactionData)
});

/**
 * Faction Members Data
 * Characters that are members of a faction
 */
export const zFactionMembersData = z.object({
    faction_id: z.uuid(),
    faction_name: z.string(),
    members: z.optional(z.array(zCharacter))
});

/**
 * Faction Members Response
 * Response containing faction members
 */
export const zFactionMembersResponse = z.object({
    data: z.optional(zFactionMembersData)
});

/**
 * Linked Character
 * A character with relationship metadata
 */
export const zLinkedCharacter = z.object({
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    description_meta: z.optional(z.string()),
    faction_role: z.optional(z.string()),
    id: z.uuid(),
    is_active: z.optional(z.boolean()),
    member_of_faction_id: z.optional(z.uuid()),
    metadata: z.optional(z.record(z.string(), z.unknown())),
    name: z.string(),
    relationship_type: z.optional(z.string()),
    strength: z.optional(z.int()),
    tags: z.optional(z.array(z.unknown()))
});

/**
 * Linked Faction
 * A faction with relationship metadata
 */
export const zLinkedFaction = z.object({
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    description_meta: z.optional(z.string()),
    id: z.uuid(),
    is_active: z.optional(z.boolean()),
    metadata: z.optional(z.record(z.string(), z.unknown())),
    name: z.string(),
    relationship_type: z.optional(z.string()),
    strength: z.optional(z.int()),
    tags: z.optional(z.array(z.unknown()))
});

/**
 * Linked Note
 * A note with relationship metadata
 */
export const zLinkedNote = z.object({
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    description_meta: z.optional(z.string()),
    id: z.uuid(),
    is_active: z.optional(z.boolean()),
    metadata: z.optional(z.record(z.string(), z.unknown())),
    name: z.string(),
    relationship_type: z.optional(z.string()),
    strength: z.optional(z.int()),
    tags: z.optional(z.array(z.unknown()))
});

/**
 * Linked Quest
 * A quest with relationship metadata
 */
export const zLinkedQuest = z.object({
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    description_meta: z.optional(z.string()),
    id: z.uuid(),
    is_active: z.optional(z.boolean()),
    metadata: z.optional(z.record(z.string(), z.unknown())),
    name: z.string(),
    relationship_type: z.optional(z.string()),
    strength: z.optional(z.int()),
    tags: z.optional(z.array(z.unknown()))
});

/**
 * Faction Links
 * Collections of entities linked to a faction
 */
export const zFactionLinks = z.object({
    characters: z.optional(z.array(zLinkedCharacter)),
    factions: z.optional(z.array(zLinkedFaction)),
    locations: z.optional(z.array(zLinkedLocation)),
    notes: z.optional(z.array(zLinkedNote)),
    quests: z.optional(z.array(zLinkedQuest))
});

/**
 * Faction Links Data
 * Links associated with a faction
 */
export const zFactionLinksData = z.object({
    faction_id: z.uuid(),
    faction_name: z.string(),
    links: z.optional(zFactionLinks)
});

/**
 * Location
 * A game location
 */
export const zLocation = z.object({
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    created_at: z.optional(z.string()),
    game_id: z.uuid(),
    id: z.uuid(),
    name: z.string(),
    parent_id: z.optional(z.uuid()),
    pinned: z.boolean(),
    tags: z.optional(z.array(z.string())),
    type: z.enum([
        'continent',
        'nation',
        'region',
        'city',
        'settlement',
        'building',
        'complex'
    ]),
    updated_at: z.optional(z.string()),
    user_id: z.int()
});

/**
 * Note
 * A game note
 */
export const zNote = z.object({
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    created_at: z.optional(z.string()),
    game_id: z.uuid(),
    id: z.uuid(),
    name: z.string(),
    parent_id: z.optional(z.uuid()),
    parent_type: z.optional(z.enum([
        'character',
        'quest',
        'location',
        'faction'
    ])),
    pinned: z.boolean(),
    tags: z.optional(z.array(z.string())),
    updated_at: z.optional(z.string()),
    user_id: z.int()
});

/**
 * Quest
 * A game quest
 */
export const zQuest = z.object({
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    created_at: z.optional(z.string()),
    game_id: z.uuid(),
    id: z.uuid(),
    name: z.string(),
    parent_id: z.optional(z.uuid()),
    pinned: z.boolean(),
    status: z.enum([
        'preparing',
        'ready',
        'active',
        'paused',
        'completed',
        'cancelled'
    ]),
    tags: z.optional(z.array(z.string())),
    updated_at: z.optional(z.string()),
    user_id: z.int()
});

/**
 * Pinned Entities
 * Collection of pinned entities grouped by type
 */
export const zPinnedEntities = z.object({
    characters: z.optional(z.array(zCharacter)),
    factions: z.optional(z.array(zFaction)),
    locations: z.optional(z.array(zLocation)),
    notes: z.optional(z.array(zNote)),
    quests: z.optional(z.array(zQuest))
});

/**
 * Pinned Entities Data
 * All pinned entities for a game
 */
export const zPinnedEntitiesData = z.object({
    game_id: z.uuid(),
    pinned_entities: zPinnedEntities,
    total_count: z.int()
});

/**
 * Quest Links
 * Collections of entities linked to a quest
 */
export const zQuestLinks = z.object({
    characters: z.optional(z.array(zLinkedCharacter)),
    factions: z.optional(z.array(zLinkedFaction)),
    locations: z.optional(z.array(zLinkedLocation)),
    notes: z.optional(z.array(zLinkedNote)),
    quests: z.optional(z.array(zLinkedQuest))
});

/**
 * Quest Links Data
 * Links associated with a quest
 */
export const zQuestLinksData = z.object({
    links: z.optional(zQuestLinks),
    quest_id: z.uuid(),
    quest_name: z.string()
});

/**
 * Note Create Parameters
 * Parameters for creating a new note
 */
export const zNoteCreateParams = z.object({
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    name: z.string(),
    parent_id: z.optional(z.uuid()),
    parent_type: z.optional(z.enum([
        'character',
        'quest',
        'location',
        'faction'
    ])),
    tags: z.optional(z.array(z.string()))
});

/**
 * Faction Create Parameters
 * Parameters for creating a new faction
 */
export const zFactionCreateParams = z.object({
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    name: z.string(),
    tags: z.optional(z.array(z.string()))
});

/**
 * Faction Response
 * Response containing a single faction
 */
export const zFactionResponse = z.object({
    data: z.optional(zFaction)
});

/**
 * Game
 * A game instance
 */
export const zGame = z.object({
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    created_at: z.optional(z.string()),
    id: z.uuid(),
    name: z.string(),
    owner_id: z.int(),
    setting: z.optional(z.string()),
    updated_at: z.optional(z.string())
});

/**
 * Game Response
 * Response containing a single game
 */
export const zGameResponse = z.object({
    data: z.optional(zGame)
});

/**
 * Link Request
 * Request to create a link between entities
 */
export const zLinkRequest = z.object({
    description: z.optional(z.string()),
    entity_id: z.uuid(),
    entity_type: z.enum([
        'character',
        'faction',
        'location',
        'quest',
        'note'
    ]),
    is_active: z.optional(z.boolean()).default(true),
    metadata: z.optional(z.record(z.string(), z.unknown())),
    relationship_type: z.optional(z.string()),
    strength: z.optional(z.int().gte(1).lte(10))
});

/**
 * Character Links
 * Collections of entities linked to a character
 */
export const zCharacterLinks = z.object({
    characters: z.optional(z.array(zLinkedCharacter)),
    factions: z.optional(z.array(zLinkedFaction)),
    locations: z.optional(z.array(zLinkedLocation)),
    notes: z.optional(z.array(zLinkedNote)),
    quests: z.optional(z.array(zLinkedQuest))
});

/**
 * Character Response
 * Response containing a single character
 */
export const zCharacterResponse = z.object({
    data: z.optional(zCharacter)
});

/**
 * Quest Create Parameters
 * Parameters for creating a new quest
 */
export const zQuestCreateParams = z.object({
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    name: z.string(),
    parent_id: z.optional(z.uuid()),
    status: z.optional(z.enum([
        'preparing',
        'ready',
        'active',
        'paused',
        'completed',
        'cancelled'
    ])),
    tags: z.optional(z.array(z.string()))
});

/**
 * Quest Create Request
 * Quest creation parameters
 */
export const zQuestCreateRequest = z.object({
    quest: zQuestCreateParams
});

/**
 * Entity Tree Response
 * Response containing hierarchical tree of entity relationships
 */
export const zEntityTreeResponse = z.object({
    data: z.optional(zEntityTreeData)
});

/**
 * Location Tree Node
 * A node in the location hierarchy tree
 */
export const zLocationTreeNode = z.object({
    get children(): z.ZodOptional {
        return z.optional(z.array(z.lazy((): any => {
            return zLocationTreeNode;
        })));
    },
    content: z.optional(z.string()),
    entity_type: z.enum([
        'location'
    ]),
    id: z.uuid(),
    name: z.string(),
    parent_id: z.optional(z.uuid()),
    tags: z.optional(z.array(z.string())),
    type: z.enum([
        'continent',
        'nation',
        'region',
        'city',
        'settlement',
        'building',
        'complex'
    ])
});

/**
 * Location Tree Response
 * Response containing hierarchical location tree
 */
export const zLocationTreeResponse = z.object({
    data: z.optional(z.array(zLocationTreeNode))
});

/**
 * Location Create Request
 * Location creation parameters
 */
export const zLocationCreateRequest = z.object({
    location: zLocationCreateParams
});

/**
 * Character Create Request
 * Character creation parameters
 */
export const zCharacterCreateRequest = z.object({
    character: zCharacterCreateParams
});

/**
 * Note Update Parameters
 * Parameters for updating an existing note (partial updates supported)
 */
export const zNoteUpdateParams = z.object({
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    name: z.optional(z.string()),
    parent_id: z.optional(z.union([
        z.uuid(),
        z.null()
    ])),
    parent_type: z.optional(z.enum([
        'character',
        'quest',
        'location',
        'faction'
    ])),
    pinned: z.optional(z.boolean()),
    tags: z.optional(z.array(z.string()))
});

/**
 * Note Update Request
 * Note update parameters
 */
export const zNoteUpdateRequest = z.object({
    note: zNoteUpdateParams
});

/**
 * Game Update Request
 * Game update parameters
 */
export const zGameUpdateRequest = z.object({
    game: zGameUpdateParams
});

/**
 * Locations Response
 * Response containing a list of locations
 */
export const zLocationsResponse = z.object({
    data: z.optional(z.array(zLocation))
});

/**
 * Quests Response
 * Response containing a list of quests
 */
export const zQuestsResponse = z.object({
    data: z.optional(z.array(zQuest))
});

export const zLinkedEntityBase = z.object({
    description: z.optional(z.string()),
    is_active: z.optional(z.boolean()),
    metadata: z.optional(z.record(z.string(), z.unknown())),
    relationship_type: z.optional(z.string()),
    strength: z.optional(z.int())
});

/**
 * Entities Data
 * Game entities data structure
 */
export const zEntitiesData = z.object({
    entities: z.optional(zEntities),
    game_id: z.uuid(),
    game_name: z.string()
});

/**
 * Quest Tree Response
 * Response containing hierarchical quest tree
 */
export const zQuestTreeResponse = z.object({
    data: z.optional(z.array(zQuestTreeNode))
});

/**
 * Factions Response
 * Response containing a list of factions
 */
export const zFactionsResponse = z.object({
    data: z.optional(z.array(zFaction))
});

/**
 * Set Primary Faction Request
 * Parameters for setting a character's primary faction
 */
export const zSetPrimaryFactionRequest = z.object({
    faction_id: z.uuid(),
    role: z.string()
});

/**
 * Games Response
 * Response containing a list of games
 */
export const zGamesResponse = z.object({
    data: z.optional(z.array(zGame))
});

/**
 * Location Links
 * Collections of entities linked to a location
 */
export const zLocationLinks = z.object({
    characters: z.optional(z.array(zLinkedCharacter)),
    factions: z.optional(z.array(zLinkedFaction)),
    locations: z.optional(z.array(zLinkedLocation)),
    notes: z.optional(z.array(zLinkedNote)),
    quests: z.optional(z.array(zLinkedQuest))
});

/**
 * Character Links Data
 * Links associated with a character
 */
export const zCharacterLinksData = z.object({
    character_id: z.uuid(),
    character_name: z.string(),
    links: z.optional(zCharacterLinks)
});

/**
 * Faction Create Request
 * Faction creation parameters
 */
export const zFactionCreateRequest = z.object({
    faction: zFactionCreateParams
});

/**
 * Notes Response
 * Response containing a list of notes
 */
export const zNotesResponse = z.object({
    data: z.optional(z.array(zNote))
});

/**
 * Note Tree Node
 * A node in the note hierarchy tree
 */
export const zNoteTreeNode = z.object({
    get children(): z.ZodOptional {
        return z.optional(z.array(z.lazy((): any => {
            return zNoteTreeNode;
        })));
    },
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    created_at: z.optional(z.string()),
    entity_type: z.enum([
        'note'
    ]),
    id: z.uuid(),
    name: z.string(),
    parent_id: z.optional(z.uuid()),
    parent_type: z.optional(z.enum([
        'character',
        'quest',
        'location',
        'faction'
    ])),
    tags: z.optional(z.array(z.string())),
    updated_at: z.optional(z.string())
});

/**
 * Character Update Parameters
 * Parameters for updating an existing character (partial updates supported)
 */
export const zCharacterUpdateParams = z.object({
    alive: z.optional(z.boolean()),
    class: z.optional(z.string()),
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    faction_role: z.optional(z.string()),
    image_url: z.optional(z.string()),
    level: z.optional(z.int()),
    member_of_faction_id: z.optional(z.uuid()),
    name: z.optional(z.string()),
    pinned: z.optional(z.boolean()),
    race: z.optional(z.string()),
    tags: z.optional(z.array(z.string()))
});

/**
 * Character Update Request
 * Character update parameters
 */
export const zCharacterUpdateRequest = z.object({
    character: zCharacterUpdateParams
});

/**
 * Note Links
 * Collections of entities linked to a note
 */
export const zNoteLinks = z.object({
    characters: z.optional(z.array(zLinkedCharacter)),
    factions: z.optional(z.array(zLinkedFaction)),
    locations: z.optional(z.array(zLinkedLocation)),
    notes: z.optional(z.array(zLinkedNote)),
    quests: z.optional(z.array(zLinkedQuest))
});

/**
 * Note Links Data
 * Links associated with a note
 */
export const zNoteLinksData = z.object({
    links: z.optional(zNoteLinks),
    note_id: z.uuid(),
    note_name: z.string()
});

/**
 * Note Links Response
 * Response containing note links
 */
export const zNoteLinksResponse = z.object({
    data: z.optional(zNoteLinksData)
});

/**
 * Location Links Data
 * Links associated with a location
 */
export const zLocationLinksData = z.object({
    links: z.optional(zLocationLinks),
    location_id: z.uuid(),
    location_name: z.string()
});

/**
 * Location Links Response
 * Response containing location links
 */
export const zLocationLinksResponse = z.object({
    data: z.optional(zLocationLinksData)
});

/**
 * Pinned Entities Response
 * Response containing all pinned entities for a game
 */
export const zPinnedEntitiesResponse = z.object({
    data: z.optional(zPinnedEntitiesData)
});

/**
 * Location Update Parameters
 * Parameters for updating an existing location (partial updates supported)
 */
export const zLocationUpdateParams = z.object({
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    name: z.optional(z.string()),
    parent_id: z.optional(z.uuid()),
    pinned: z.optional(z.boolean()),
    tags: z.optional(z.array(z.string())),
    type: z.optional(z.enum([
        'continent',
        'nation',
        'region',
        'city',
        'settlement',
        'building',
        'complex'
    ]))
});

/**
 * Game Create Parameters
 * Parameters for creating a new game
 */
export const zGameCreateParams = z.object({
    content: z.optional(z.string()),
    content_plain_text: z.optional(z.string()),
    name: z.string(),
    setting: z.optional(z.string())
});

/**
 * Game Create Request
 * Game creation parameters
 */
export const zGameCreateRequest = z.object({
    game: zGameCreateParams
});

/**
 * Link Update Request
 * Request to update link metadata between entities
 */
export const zLinkUpdateRequest = z.object({
    description: z.optional(z.string()),
    is_active: z.optional(z.boolean()),
    metadata: z.optional(z.record(z.string(), z.unknown())),
    relationship_type: z.optional(z.string()),
    strength: z.optional(z.int().gte(1).lte(10))
});

/**
 * Signup Request
 * User registration credentials
 */
export const zSignupRequest = z.object({
    email: z.string(),
    password: z.string()
});

/**
 * Quest Response
 * Response containing a single quest
 */
export const zQuestResponse = z.object({
    data: z.optional(zQuest)
});

/**
 * Character Links Response
 * Response containing character links
 */
export const zCharacterLinksResponse = z.object({
    data: z.optional(zCharacterLinksData)
});

/**
 * Note Response
 * Response containing a single note
 */
export const zNoteResponse = z.object({
    data: z.optional(zNote)
});

/**
 * Location Update Request
 * Location update parameters
 */
export const zLocationUpdateRequest = z.object({
    location: zLocationUpdateParams
});

/**
 * Note Create Request
 * Note creation parameters
 */
export const zNoteCreateRequest = z.object({
    note: zNoteCreateParams
});

/**
 * User
 * User information
 */
export const zUser = z.object({
    confirmed_at: z.optional(z.string()),
    email: z.string(),
    id: z.int()
});

/**
 * Login Response
 * Successful login response
 */
export const zLoginResponse = z.object({
    token: z.string(),
    user: zUser
});

/**
 * Location Response
 * Response containing a single location
 */
export const zLocationResponse = z.object({
    data: z.optional(zLocation)
});

/**
 * Auth Status Response
 * Authentication status response
 */
export const zAuthStatusResponse = z.object({
    authenticated: z.boolean(),
    user: z.optional(zUser)
});

/**
 * Character Notes Tree Data
 * Hierarchical tree of notes associated with a character
 */
export const zCharacterNotesTreeData = z.object({
    character_id: z.uuid(),
    character_name: z.string(),
    notes_tree: z.optional(z.array(zNoteTreeNode))
});

/**
 * Character Notes Tree Response
 * Response containing character notes tree
 */
export const zCharacterNotesTreeResponse = z.object({
    data: z.optional(zCharacterNotesTreeData)
});

/**
 * Quest Links Response
 * Response containing quest links
 */
export const zQuestLinksResponse = z.object({
    data: z.optional(zQuestLinksData)
});

/**
 * Login Request
 * Login credentials - either email/password or magic link token
 */
export const zLoginRequest = z.object({
    email: z.optional(z.string()),
    password: z.optional(z.string()),
    token: z.optional(z.string())
});

/**
 * Faction Links Response
 * Response containing faction links
 */
export const zFactionLinksResponse = z.object({
    data: z.optional(zFactionLinksData)
});

/**
 * Entities Response
 * Response containing all game entities
 */
export const zEntitiesResponse = z.object({
    data: z.optional(zEntitiesData)
});

/**
 * Member
 * A game member
 */
export const zMember = z.object({
    email: z.string(),
    joined_at: z.optional(z.string()),
    role: z.string(),
    user_id: z.int()
});

/**
 * Members Response
 * Response containing a list of game members
 */
export const zMembersResponse = z.object({
    data: z.optional(z.array(zMember))
});

export const zGetFactionLinksData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid(),
        faction_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zGetFactionLinksResponse = zFactionLinksResponse;

export const zCreateFactionLinkData = z.object({
    body: zLinkRequest,
    path: z.object({
        game_id: z.uuid(),
        faction_id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zListLocationsData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zListLocationsResponse = zLocationsResponse;

export const zCreateLocationData = z.object({
    body: zLocationCreateRequest,
    path: z.object({
        game_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Created
 */
export const zCreateLocationResponse = zLocationResponse;

export const zLogoutUserData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zLoginUserData = z.object({
    body: zLoginRequest,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zLoginUserResponse = zLoginResponse;

export const zDeleteLocationLinkData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid(),
        location_id: z.uuid(),
        entity_type: z.enum([
            'character',
            'faction',
            'location',
            'quest',
            'note'
        ]),
        entity_id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zUpdateLocationLinkData = z.object({
    body: zLinkUpdateRequest,
    path: z.object({
        game_id: z.uuid(),
        location_id: z.uuid(),
        entity_type: z.enum([
            'note',
            'character',
            'faction',
            'quest',
            'location'
        ]),
        entity_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zUpdateLocationLinkResponse = z.object({
    entity_id: z.optional(z.uuid()),
    entity_type: z.optional(z.string()),
    location_id: z.optional(z.uuid()),
    message: z.optional(z.string()),
    updated_at: z.optional(z.iso.datetime())
});

export const zListGameMembersData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zListGameMembersResponse = zMembersResponse;

export const zAddGameMemberData = z.object({
    body: z.object({
        user_id: z.int(),
        role: z.optional(z.string())
    }),
    path: z.object({
        game_id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zGetCharacterNotesTreeData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid(),
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zGetCharacterNotesTreeResponse = zCharacterNotesTreeResponse;

export const zDeleteLocationData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid(),
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zGetLocationData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid(),
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zGetLocationResponse = zLocationResponse;

export const zUpdateLocationData = z.object({
    body: zLocationUpdateRequest,
    path: z.object({
        game_id: z.uuid(),
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zUpdateLocationResponse = zLocationResponse;

export const zListFactionsData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zListFactionsResponse = zFactionsResponse;

export const zCreateFactionData = z.object({
    body: zFactionCreateRequest,
    path: z.object({
        game_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Created
 */
export const zCreateFactionResponse = zFactionResponse;

export const zDeleteCharacterLinkData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid(),
        character_id: z.uuid(),
        entity_type: z.enum([
            'note',
            'faction',
            'location',
            'quest',
            'character'
        ]),
        entity_id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zUpdateCharacterLinkData = z.object({
    body: zLinkUpdateRequest,
    path: z.object({
        game_id: z.uuid(),
        character_id: z.uuid(),
        entity_type: z.enum([
            'note',
            'faction',
            'location',
            'quest',
            'character'
        ]),
        entity_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zUpdateCharacterLinkResponse = z.object({
    character_id: z.optional(z.uuid()),
    entity_id: z.optional(z.uuid()),
    entity_type: z.optional(z.string()),
    message: z.optional(z.string()),
    updated_at: z.optional(z.iso.datetime())
});

export const zListGameEntitiesData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zListGameEntitiesResponse = zEntitiesResponse;

export const zGetNoteLinksData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid(),
        note_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zGetNoteLinksResponse = zNoteLinksResponse;

export const zCreateNoteLinkData = z.object({
    body: zLinkRequest,
    path: z.object({
        game_id: z.uuid(),
        note_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Created
 */
export const zCreateNoteLinkResponse = z.object({
    entity_id: z.optional(z.uuid()),
    entity_type: z.optional(z.string()),
    message: z.optional(z.string()),
    note_id: z.optional(z.uuid())
});

export const zGetLocationTreeData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zGetLocationTreeResponse = zLocationTreeResponse;

export const zRemoveCharacterPrimaryFactionData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid(),
        character_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zRemoveCharacterPrimaryFactionResponse = zCharacterResponse;

export const zGetCharacterPrimaryFactionData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid(),
        character_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zGetCharacterPrimaryFactionResponse = zCharacterPrimaryFactionResponse;

export const zSetCharacterPrimaryFactionData = z.object({
    body: zSetPrimaryFactionRequest,
    path: z.object({
        game_id: z.uuid(),
        character_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zSetCharacterPrimaryFactionResponse = zCharacterResponse;

export const zPinCharacterData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid(),
        character_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zPinCharacterResponse = zCharacterResponse;

export const zGetFactionMembersData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid(),
        faction_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zGetFactionMembersResponse = zFactionMembersResponse;

export const zListQuestsData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zListQuestsResponse = zQuestsResponse;

export const zCreateQuestData = z.object({
    body: zQuestCreateRequest,
    path: z.object({
        game_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Created
 */
export const zCreateQuestResponse = zQuestResponse;

export const zDeleteNoteData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid(),
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zGetNoteData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid(),
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zGetNoteResponse = zNoteResponse;

export const zUpdateNoteData = z.object({
    body: zNoteUpdateRequest,
    path: z.object({
        game_id: z.uuid(),
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zUpdateNoteResponse = zNoteResponse;

export const zGetCharacterLinksData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid(),
        character_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zGetCharacterLinksResponse = zCharacterLinksResponse;

export const zCreateCharacterLinkData = z.object({
    body: zLinkRequest,
    path: z.object({
        game_id: z.uuid(),
        character_id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zListCharactersData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zListCharactersResponse = zCharactersResponse;

export const zCreateCharacterData = z.object({
    body: zCharacterCreateRequest,
    path: z.object({
        game_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Created
 */
export const zCreateCharacterResponse = zCharacterResponse;

export const zDeleteGameData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zGetGameData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zGetGameResponse = zGameResponse;

export const zUpdateGameData = z.object({
    body: zGameUpdateRequest,
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zUpdateGameResponse = zGameResponse;

export const zGetGameEntityTreeData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid()
    }),
    query: z.optional(z.object({
        depth: z.optional(z.int()),
        start_entity_type: z.optional(z.string()),
        start_entity_id: z.optional(z.uuid())
    }))
});

/**
 * Success
 */
export const zGetGameEntityTreeResponse = zEntityTreeResponse;

export const zUnpinCharacterData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid(),
        character_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zUnpinCharacterResponse = zCharacterResponse;

export const zSignupUserData = z.object({
    body: zSignupRequest,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Created
 */
export const zSignupUserResponse = zLoginResponse;

export const zGetAuthStatusData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zGetAuthStatusResponse = zAuthStatusResponse;

export const zDeleteQuestData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid(),
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zGetQuestData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid(),
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zGetQuestResponse = zQuestResponse;

export const zUpdateQuestData = z.object({
    body: zQuestUpdateRequest,
    path: z.object({
        game_id: z.uuid(),
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zUpdateQuestResponse = zQuestResponse;

export const zGetLocationLinksData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid(),
        location_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zGetLocationLinksResponse = zLocationLinksResponse;

export const zCreateLocationLinkData = z.object({
    body: zLinkRequest,
    path: z.object({
        game_id: z.uuid(),
        location_id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zDeleteNoteLinkData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid(),
        note_id: z.uuid(),
        entity_type: z.enum([
            'character',
            'faction',
            'location',
            'quest',
            'note'
        ]),
        entity_id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zUpdateNoteLinkData = z.object({
    body: zLinkUpdateRequest,
    path: z.object({
        game_id: z.uuid(),
        note_id: z.uuid(),
        entity_type: z.enum([
            'character',
            'faction',
            'location',
            'quest',
            'note'
        ]),
        entity_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zUpdateNoteLinkResponse = z.object({
    entity_id: z.optional(z.uuid()),
    entity_type: z.optional(z.string()),
    message: z.optional(z.string()),
    note_id: z.optional(z.uuid()),
    updated_at: z.optional(z.iso.datetime())
});

export const zDeleteCharacterData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid(),
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zGetCharacterData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid(),
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zGetCharacterResponse = zCharacterResponse;

export const zUpdateCharacterData = z.object({
    body: zCharacterUpdateRequest,
    path: z.object({
        game_id: z.uuid(),
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zUpdateCharacterResponse = zCharacterResponse;

export const zGetQuestLinksData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid(),
        quest_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zGetQuestLinksResponse = zQuestLinksResponse;

export const zCreateQuestLinkData = z.object({
    body: zLinkRequest,
    path: z.object({
        game_id: z.uuid(),
        quest_id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zDeleteFactionData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid(),
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zGetFactionData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid(),
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zGetFactionResponse = zFactionResponse;

export const zUpdateFactionData = z.object({
    body: zFactionUpdateRequest,
    path: z.object({
        game_id: z.uuid(),
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zUpdateFactionResponse = zFactionResponse;

export const zRemoveGameMemberData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid(),
        user_id: z.int()
    }),
    query: z.optional(z.never())
});

export const zDeleteFactionLinkData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid(),
        faction_id: z.uuid(),
        entity_type: z.enum([
            'character',
            'location',
            'quest',
            'note',
            'faction'
        ]),
        entity_id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zUpdateFactionLinkData = z.object({
    body: zLinkUpdateRequest,
    path: z.object({
        game_id: z.uuid(),
        faction_id: z.uuid(),
        entity_type: z.enum([
            'note',
            'character',
            'location',
            'quest',
            'faction'
        ]),
        entity_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zUpdateFactionLinkResponse = z.object({
    entity_id: z.optional(z.uuid()),
    entity_type: z.optional(z.string()),
    faction_id: z.optional(z.uuid()),
    message: z.optional(z.string()),
    updated_at: z.optional(z.iso.datetime())
});

export const zListNotesData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zListNotesResponse = zNotesResponse;

export const zCreateNoteData = z.object({
    body: zNoteCreateRequest,
    path: z.object({
        game_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Created
 */
export const zCreateNoteResponse = zNoteResponse;

export const zListPinnedEntitiesData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zListPinnedEntitiesResponse = zPinnedEntitiesResponse;

export const zListGamesData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zListGamesResponse = zGamesResponse;

export const zCreateGameData = z.object({
    body: zGameCreateRequest,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Created
 */
export const zCreateGameResponse = zGameResponse;

export const zDeleteQuestLinkData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid(),
        quest_id: z.uuid(),
        entity_type: z.enum([
            'character',
            'faction',
            'location',
            'note',
            'quest'
        ]),
        entity_id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zUpdateQuestLinkData = z.object({
    body: zLinkUpdateRequest,
    path: z.object({
        game_id: z.uuid(),
        quest_id: z.uuid(),
        entity_type: z.enum([
            'note',
            'character',
            'faction',
            'location',
            'quest'
        ]),
        entity_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zUpdateQuestLinkResponse = z.object({
    entity_id: z.optional(z.uuid()),
    entity_type: z.optional(z.string()),
    message: z.optional(z.string()),
    quest_id: z.optional(z.uuid()),
    updated_at: z.optional(z.iso.datetime())
});

export const zGetQuestTreeData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        game_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Success
 */
export const zGetQuestTreeResponse = zQuestTreeResponse;