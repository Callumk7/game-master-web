// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { LoginUserData, LoginUserResponses, LoginUserErrors, LogoutUserData, LogoutUserResponses, LogoutUserErrors, SignupUserData, SignupUserResponses, SignupUserErrors, GetAuthStatusData, GetAuthStatusResponses, GetAuthStatusErrors, ListGamesData, ListGamesResponses, ListGamesErrors, CreateGameData, CreateGameResponses, CreateGameErrors, ListCharactersData, ListCharactersResponses, ListCharactersErrors, CreateCharacterData, CreateCharacterResponses, CreateCharacterErrors, GetCharacterLinksData, GetCharacterLinksResponses, GetCharacterLinksErrors, CreateCharacterLinkData, CreateCharacterLinkResponses, CreateCharacterLinkErrors, DeleteCharacterLinkData, DeleteCharacterLinkResponses, DeleteCharacterLinkErrors, DeleteCharacterData, DeleteCharacterResponses, DeleteCharacterErrors, GetCharacterData, GetCharacterResponses, GetCharacterErrors, UpdateCharacterData, UpdateCharacterResponses, UpdateCharacterErrors, ListFactionsData, ListFactionsResponses, ListFactionsErrors, CreateFactionData, CreateFactionResponses, CreateFactionErrors, GetFactionLinksData, GetFactionLinksResponses, GetFactionLinksErrors, CreateFactionLinkData, CreateFactionLinkResponses, CreateFactionLinkErrors, DeleteFactionLinkData, DeleteFactionLinkResponses, DeleteFactionLinkErrors, DeleteFactionData, DeleteFactionResponses, DeleteFactionErrors, GetFactionData, GetFactionResponses, GetFactionErrors, UpdateFactionData, UpdateFactionResponses, UpdateFactionErrors, ListGameEntitiesData, ListGameEntitiesResponses, ListGameEntitiesErrors, ListLocationsData, ListLocationsResponses, ListLocationsErrors, CreateLocationData, CreateLocationResponses, CreateLocationErrors, DeleteLocationData, DeleteLocationResponses, DeleteLocationErrors, GetLocationData, GetLocationResponses, GetLocationErrors, UpdateLocationData, UpdateLocationResponses, UpdateLocationErrors, GetLocationLinksData, GetLocationLinksResponses, GetLocationLinksErrors, CreateLocationLinkData, CreateLocationLinkResponses, CreateLocationLinkErrors, DeleteLocationLinkData, DeleteLocationLinkResponses, DeleteLocationLinkErrors, ListGameMembersData, ListGameMembersResponses, ListGameMembersErrors, AddGameMemberData, AddGameMemberResponses, AddGameMemberErrors, RemoveGameMemberData, RemoveGameMemberResponses, RemoveGameMemberErrors, ListNotesData, ListNotesResponses, ListNotesErrors, CreateNoteData, CreateNoteResponses, CreateNoteErrors, DeleteNoteData, DeleteNoteResponses, DeleteNoteErrors, GetNoteData, GetNoteResponses, GetNoteErrors, UpdateNoteData, UpdateNoteResponses, UpdateNoteErrors, GetNoteLinksData, GetNoteLinksResponses, GetNoteLinksErrors, CreateNoteLinkData, CreateNoteLinkResponses, CreateNoteLinkErrors, DeleteNoteLinkData, DeleteNoteLinkResponses, DeleteNoteLinkErrors, ListQuestsData, ListQuestsResponses, ListQuestsErrors, CreateQuestData, CreateQuestResponses, CreateQuestErrors, DeleteQuestData, DeleteQuestResponses, DeleteQuestErrors, GetQuestData, GetQuestResponses, GetQuestErrors, UpdateQuestData, UpdateQuestResponses, UpdateQuestErrors, GetQuestLinksData, GetQuestLinksResponses, GetQuestLinksErrors, CreateQuestLinkData, CreateQuestLinkResponses, CreateQuestLinkErrors, DeleteQuestLinkData, DeleteQuestLinkResponses, DeleteQuestLinkErrors, DeleteGameData, DeleteGameResponses, DeleteGameErrors, GetGameData, GetGameResponses, GetGameErrors, UpdateGameData, UpdateGameResponses, UpdateGameErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Login user
 * Authenticate user with email/password or magic link token
 */
export const loginUser = <ThrowOnError extends boolean = false>(options: Options<LoginUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginUserResponses, LoginUserErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logout user
 * Invalidate current session token
 */
export const logoutUser = <ThrowOnError extends boolean = false>(options?: Options<LogoutUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<LogoutUserResponses, LogoutUserErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/auth/logout',
        ...options
    });
};

/**
 * Sign up new user
 * Register a new user with email and password
 */
export const signupUser = <ThrowOnError extends boolean = false>(options: Options<SignupUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SignupUserResponses, SignupUserErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/auth/signup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get auth status
 * Check if user is authenticated and get user info
 */
export const getAuthStatus = <ThrowOnError extends boolean = false>(options?: Options<GetAuthStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAuthStatusResponses, GetAuthStatusErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/auth/status',
        ...options
    });
};

/**
 * List all games
 * Retrieve a list of all games accessible to the current user
 */
export const listGames = <ThrowOnError extends boolean = false>(options?: Options<ListGamesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListGamesResponses, ListGamesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games',
        ...options
    });
};

/**
 * Create a new game
 * Create a new game with the provided parameters
 */
export const createGame = <ThrowOnError extends boolean = false>(options: Options<CreateGameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateGameResponses, CreateGameErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List characters
 * Get all characters in a game
 */
export const listCharacters = <ThrowOnError extends boolean = false>(options: Options<ListCharactersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListCharactersResponses, ListCharactersErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/characters',
        ...options
    });
};

/**
 * Create character
 * Create a new character in the game
 */
export const createCharacter = <ThrowOnError extends boolean = false>(options: Options<CreateCharacterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCharacterResponses, CreateCharacterErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/characters',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get character links
 * Get all entities linked to a character
 */
export const getCharacterLinks = <ThrowOnError extends boolean = false>(options: Options<GetCharacterLinksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCharacterLinksResponses, GetCharacterLinksErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/characters/{character_id}/links',
        ...options
    });
};

/**
 * Create character link
 * Link a character to another entity (note, faction, etc.)
 */
export const createCharacterLink = <ThrowOnError extends boolean = false>(options: Options<CreateCharacterLinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCharacterLinkResponses, CreateCharacterLinkErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/characters/{character_id}/links',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete character link
 * Remove a link between a character and another entity
 */
export const deleteCharacterLink = <ThrowOnError extends boolean = false>(options: Options<DeleteCharacterLinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteCharacterLinkResponses, DeleteCharacterLinkErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/characters/{character_id}/links/{entity_type}/{entity_id}',
        ...options
    });
};

/**
 * Delete character
 * Delete a character from the game
 */
export const deleteCharacter = <ThrowOnError extends boolean = false>(options: Options<DeleteCharacterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteCharacterResponses, DeleteCharacterErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/characters/{id}',
        ...options
    });
};

/**
 * Get character
 * Get a specific character by ID
 */
export const getCharacter = <ThrowOnError extends boolean = false>(options: Options<GetCharacterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCharacterResponses, GetCharacterErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/characters/{id}',
        ...options
    });
};

/**
 * Update character
 * Update an existing character
 */
export const updateCharacter = <ThrowOnError extends boolean = false>(options: Options<UpdateCharacterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateCharacterResponses, UpdateCharacterErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/characters/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List factions
 * Get all factions in a game
 */
export const listFactions = <ThrowOnError extends boolean = false>(options: Options<ListFactionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListFactionsResponses, ListFactionsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/factions',
        ...options
    });
};

/**
 * Create faction
 * Create a new faction in the game
 */
export const createFaction = <ThrowOnError extends boolean = false>(options: Options<CreateFactionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateFactionResponses, CreateFactionErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/factions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get faction links
 * Get all entities linked to a faction
 */
export const getFactionLinks = <ThrowOnError extends boolean = false>(options: Options<GetFactionLinksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFactionLinksResponses, GetFactionLinksErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/factions/{faction_id}/links',
        ...options
    });
};

/**
 * Create faction link
 * Link a faction to another entity (note, character, etc.)
 */
export const createFactionLink = <ThrowOnError extends boolean = false>(options: Options<CreateFactionLinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateFactionLinkResponses, CreateFactionLinkErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/factions/{faction_id}/links',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete faction link
 * Remove a link between a faction and another entity
 */
export const deleteFactionLink = <ThrowOnError extends boolean = false>(options: Options<DeleteFactionLinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteFactionLinkResponses, DeleteFactionLinkErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/factions/{faction_id}/links/{entity_type}/{entity_id}',
        ...options
    });
};

/**
 * Delete faction
 * Delete a faction from the game
 */
export const deleteFaction = <ThrowOnError extends boolean = false>(options: Options<DeleteFactionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteFactionResponses, DeleteFactionErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/factions/{id}',
        ...options
    });
};

/**
 * Get faction
 * Get a specific faction by ID
 */
export const getFaction = <ThrowOnError extends boolean = false>(options: Options<GetFactionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFactionResponses, GetFactionErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/factions/{id}',
        ...options
    });
};

/**
 * Update faction
 * Update an existing faction
 */
export const updateFaction = <ThrowOnError extends boolean = false>(options: Options<UpdateFactionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateFactionResponses, UpdateFactionErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/factions/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List game entities
 * Retrieve all entities (notes, characters, factions, locations, quests) for the specified game
 */
export const listGameEntities = <ThrowOnError extends boolean = false>(options: Options<ListGameEntitiesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListGameEntitiesResponses, ListGameEntitiesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/links',
        ...options
    });
};

/**
 * List locations
 * Get all locations in a game
 */
export const listLocations = <ThrowOnError extends boolean = false>(options: Options<ListLocationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListLocationsResponses, ListLocationsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/locations',
        ...options
    });
};

/**
 * Create location
 * Create a new location in the game
 */
export const createLocation = <ThrowOnError extends boolean = false>(options: Options<CreateLocationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateLocationResponses, CreateLocationErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/locations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete location
 * Delete a location from the game
 */
export const deleteLocation = <ThrowOnError extends boolean = false>(options: Options<DeleteLocationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteLocationResponses, DeleteLocationErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/locations/{id}',
        ...options
    });
};

/**
 * Get location
 * Get a specific location by ID
 */
export const getLocation = <ThrowOnError extends boolean = false>(options: Options<GetLocationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLocationResponses, GetLocationErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/locations/{id}',
        ...options
    });
};

/**
 * Update location
 * Update an existing location
 */
export const updateLocation = <ThrowOnError extends boolean = false>(options: Options<UpdateLocationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateLocationResponses, UpdateLocationErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/locations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get location links
 * Get all entities linked to a location
 */
export const getLocationLinks = <ThrowOnError extends boolean = false>(options: Options<GetLocationLinksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLocationLinksResponses, GetLocationLinksErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/locations/{location_id}/links',
        ...options
    });
};

/**
 * Create location link
 * Link a location to another entity (note, faction, etc.)
 */
export const createLocationLink = <ThrowOnError extends boolean = false>(options: Options<CreateLocationLinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateLocationLinkResponses, CreateLocationLinkErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/locations/{location_id}/links',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete location link
 * Remove a link between a location and another entity
 */
export const deleteLocationLink = <ThrowOnError extends boolean = false>(options: Options<DeleteLocationLinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteLocationLinkResponses, DeleteLocationLinkErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/locations/{location_id}/links/{entity_type}/{entity_id}',
        ...options
    });
};

/**
 * List game members
 * Retrieve a list of all members in the specified game
 */
export const listGameMembers = <ThrowOnError extends boolean = false>(options: Options<ListGameMembersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListGameMembersResponses, ListGameMembersErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/members',
        ...options
    });
};

/**
 * Add a member to a game
 * Add a user as a member to the specified game
 */
export const addGameMember = <ThrowOnError extends boolean = false>(options: Options<AddGameMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddGameMemberResponses, AddGameMemberErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove a member from a game
 * Remove a user from the specified game
 */
export const removeGameMember = <ThrowOnError extends boolean = false>(options: Options<RemoveGameMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveGameMemberResponses, RemoveGameMemberErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/members/{user_id}',
        ...options
    });
};

/**
 * List notes
 * Retrieve all notes for a specific game
 */
export const listNotes = <ThrowOnError extends boolean = false>(options: Options<ListNotesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListNotesResponses, ListNotesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/notes',
        ...options
    });
};

/**
 * Create a note
 * Create a new note for the specified game
 */
export const createNote = <ThrowOnError extends boolean = false>(options: Options<CreateNoteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateNoteResponses, CreateNoteErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/notes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a note
 * Delete a specific note by its ID
 */
export const deleteNote = <ThrowOnError extends boolean = false>(options: Options<DeleteNoteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteNoteResponses, DeleteNoteErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/notes/{id}',
        ...options
    });
};

/**
 * Get a note
 * Retrieve a specific note by its ID
 */
export const getNote = <ThrowOnError extends boolean = false>(options: Options<GetNoteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNoteResponses, GetNoteErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/notes/{id}',
        ...options
    });
};

/**
 * Update a note
 * Update a specific note with the provided parameters
 */
export const updateNote = <ThrowOnError extends boolean = false>(options: Options<UpdateNoteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateNoteResponses, UpdateNoteErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/notes/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List note links
 * Retrieve all entities linked to a specific note
 */
export const getNoteLinks = <ThrowOnError extends boolean = false>(options: Options<GetNoteLinksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNoteLinksResponses, GetNoteLinksErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/notes/{note_id}/links',
        ...options
    });
};

/**
 * Create a link
 * Create a link between a note and another entity (character, faction, location, quest)
 */
export const createNoteLink = <ThrowOnError extends boolean = false>(options: Options<CreateNoteLinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateNoteLinkResponses, CreateNoteLinkErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/notes/{note_id}/links',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a link
 * Remove a link between a note and another entity
 */
export const deleteNoteLink = <ThrowOnError extends boolean = false>(options: Options<DeleteNoteLinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteNoteLinkResponses, DeleteNoteLinkErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/notes/{note_id}/links/{entity_type}/{entity_id}',
        ...options
    });
};

/**
 * List quests
 * Get all quests in a game
 */
export const listQuests = <ThrowOnError extends boolean = false>(options: Options<ListQuestsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListQuestsResponses, ListQuestsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/quests',
        ...options
    });
};

/**
 * Create quest
 * Create a new quest in the game
 */
export const createQuest = <ThrowOnError extends boolean = false>(options: Options<CreateQuestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateQuestResponses, CreateQuestErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/quests',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete quest
 * Delete a quest from the game
 */
export const deleteQuest = <ThrowOnError extends boolean = false>(options: Options<DeleteQuestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteQuestResponses, DeleteQuestErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/quests/{id}',
        ...options
    });
};

/**
 * Get quest
 * Get a specific quest by ID
 */
export const getQuest = <ThrowOnError extends boolean = false>(options: Options<GetQuestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetQuestResponses, GetQuestErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/quests/{id}',
        ...options
    });
};

/**
 * Update quest
 * Update an existing quest
 */
export const updateQuest = <ThrowOnError extends boolean = false>(options: Options<UpdateQuestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateQuestResponses, UpdateQuestErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/quests/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get quest links
 * Get all entities linked to a quest
 */
export const getQuestLinks = <ThrowOnError extends boolean = false>(options: Options<GetQuestLinksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetQuestLinksResponses, GetQuestLinksErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/quests/{quest_id}/links',
        ...options
    });
};

/**
 * Create quest link
 * Link a quest to another entity (note, character, faction, location)
 */
export const createQuestLink = <ThrowOnError extends boolean = false>(options: Options<CreateQuestLinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateQuestLinkResponses, CreateQuestLinkErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/quests/{quest_id}/links',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete quest link
 * Remove a link between a quest and another entity
 */
export const deleteQuestLink = <ThrowOnError extends boolean = false>(options: Options<DeleteQuestLinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteQuestLinkResponses, DeleteQuestLinkErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{game_id}/quests/{quest_id}/links/{entity_type}/{entity_id}',
        ...options
    });
};

/**
 * Delete a game
 * Delete a specific game by its ID
 */
export const deleteGame = <ThrowOnError extends boolean = false>(options: Options<DeleteGameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteGameResponses, DeleteGameErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{id}',
        ...options
    });
};

/**
 * Get a game
 * Retrieve a specific game by its ID
 */
export const getGame = <ThrowOnError extends boolean = false>(options: Options<GetGameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetGameResponses, GetGameErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{id}',
        ...options
    });
};

/**
 * Update a game
 * Update a specific game with the provided parameters
 */
export const updateGame = <ThrowOnError extends boolean = false>(options: Options<UpdateGameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateGameResponses, UpdateGameErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/games/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};