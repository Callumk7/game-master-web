// This file is auto-generated by @hey-api/openapi-ts

import { type Options, loginUser, logoutUser, signupUser, getAuthStatus, listGames, createGame, listCharacters, createCharacter, getCharacterLinks, createCharacterLink, deleteCharacterLink, deleteCharacter, getCharacter, updateCharacter, getCharacterNotesTree, listFactions, createFaction, getFactionLinks, createFactionLink, deleteFactionLink, deleteFaction, getFaction, updateFaction, listGameEntities, listLocations, createLocation, getLocationTree, deleteLocation, getLocation, updateLocation, getLocationLinks, createLocationLink, deleteLocationLink, listGameMembers, addGameMember, removeGameMember, listNotes, createNote, deleteNote, getNote, updateNote, getNoteLinks, createNoteLink, deleteNoteLink, listQuests, createQuest, getQuestTree, deleteQuest, getQuest, updateQuest, getQuestLinks, createQuestLink, deleteQuestLink, deleteGame, getGame, updateGame } from '../sdk.gen';
import { type UseMutationOptions, queryOptions } from '@tanstack/react-query';
import type { LoginUserData, LoginUserError, LoginUserResponse, LogoutUserData, LogoutUserError, SignupUserData, SignupUserError, SignupUserResponse, GetAuthStatusData, ListGamesData, CreateGameData, CreateGameError, CreateGameResponse, ListCharactersData, CreateCharacterData, CreateCharacterError, CreateCharacterResponse, GetCharacterLinksData, CreateCharacterLinkData, CreateCharacterLinkError, DeleteCharacterLinkData, DeleteCharacterLinkError, DeleteCharacterData, DeleteCharacterError, GetCharacterData, UpdateCharacterData, UpdateCharacterError, UpdateCharacterResponse, GetCharacterNotesTreeData, ListFactionsData, CreateFactionData, CreateFactionError, CreateFactionResponse, GetFactionLinksData, CreateFactionLinkData, CreateFactionLinkError, DeleteFactionLinkData, DeleteFactionLinkError, DeleteFactionData, DeleteFactionError, GetFactionData, UpdateFactionData, UpdateFactionError, UpdateFactionResponse, ListGameEntitiesData, ListLocationsData, CreateLocationData, CreateLocationError, CreateLocationResponse, GetLocationTreeData, DeleteLocationData, DeleteLocationError, GetLocationData, UpdateLocationData, UpdateLocationError, UpdateLocationResponse, GetLocationLinksData, CreateLocationLinkData, CreateLocationLinkError, DeleteLocationLinkData, DeleteLocationLinkError, ListGameMembersData, AddGameMemberData, AddGameMemberError, RemoveGameMemberData, RemoveGameMemberError, ListNotesData, CreateNoteData, CreateNoteError, CreateNoteResponse, DeleteNoteData, DeleteNoteError, GetNoteData, UpdateNoteData, UpdateNoteError, UpdateNoteResponse, GetNoteLinksData, CreateNoteLinkData, CreateNoteLinkError, CreateNoteLinkResponse, DeleteNoteLinkData, DeleteNoteLinkError, ListQuestsData, CreateQuestData, CreateQuestError, CreateQuestResponse, GetQuestTreeData, DeleteQuestData, DeleteQuestError, GetQuestData, UpdateQuestData, UpdateQuestError, UpdateQuestResponse, GetQuestLinksData, CreateQuestLinkData, CreateQuestLinkError, DeleteQuestLinkData, DeleteQuestLinkError, DeleteGameData, DeleteGameError, GetGameData, UpdateGameData, UpdateGameError, UpdateGameResponse } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

/**
 * Login user
 * Authenticate user with email/password or magic link token
 */
export const loginUserMutation = (options?: Partial<Options<LoginUserData>>): UseMutationOptions<LoginUserResponse, LoginUserError, Options<LoginUserData>> => {
    const mutationOptions: UseMutationOptions<LoginUserResponse, LoginUserError, Options<LoginUserData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await loginUser({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Logout user
 * Invalidate current session token
 */
export const logoutUserMutation = (options?: Partial<Options<LogoutUserData>>): UseMutationOptions<unknown, LogoutUserError, Options<LogoutUserData>> => {
    const mutationOptions: UseMutationOptions<unknown, LogoutUserError, Options<LogoutUserData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await logoutUser({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Sign up new user
 * Register a new user with email and password
 */
export const signupUserMutation = (options?: Partial<Options<SignupUserData>>): UseMutationOptions<SignupUserResponse, SignupUserError, Options<SignupUserData>> => {
    const mutationOptions: UseMutationOptions<SignupUserResponse, SignupUserError, Options<SignupUserData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await signupUser({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getAuthStatusQueryKey = (options?: Options<GetAuthStatusData>) => createQueryKey('getAuthStatus', options);

/**
 * Get auth status
 * Check if user is authenticated and get user info
 */
export const getAuthStatusOptions = (options?: Options<GetAuthStatusData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAuthStatus({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAuthStatusQueryKey(options)
    });
};

export const listGamesQueryKey = (options?: Options<ListGamesData>) => createQueryKey('listGames', options);

/**
 * List all games
 * Retrieve a list of all games accessible to the current user
 */
export const listGamesOptions = (options?: Options<ListGamesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listGames({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listGamesQueryKey(options)
    });
};

/**
 * Create a new game
 * Create a new game with the provided parameters
 */
export const createGameMutation = (options?: Partial<Options<CreateGameData>>): UseMutationOptions<CreateGameResponse, CreateGameError, Options<CreateGameData>> => {
    const mutationOptions: UseMutationOptions<CreateGameResponse, CreateGameError, Options<CreateGameData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createGame({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listCharactersQueryKey = (options: Options<ListCharactersData>) => createQueryKey('listCharacters', options);

/**
 * List characters
 * Get all characters in a game
 */
export const listCharactersOptions = (options: Options<ListCharactersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listCharacters({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listCharactersQueryKey(options)
    });
};

/**
 * Create character
 * Create a new character in the game
 */
export const createCharacterMutation = (options?: Partial<Options<CreateCharacterData>>): UseMutationOptions<CreateCharacterResponse, CreateCharacterError, Options<CreateCharacterData>> => {
    const mutationOptions: UseMutationOptions<CreateCharacterResponse, CreateCharacterError, Options<CreateCharacterData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createCharacter({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getCharacterLinksQueryKey = (options: Options<GetCharacterLinksData>) => createQueryKey('getCharacterLinks', options);

/**
 * Get character links
 * Get all entities linked to a character
 */
export const getCharacterLinksOptions = (options: Options<GetCharacterLinksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCharacterLinks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCharacterLinksQueryKey(options)
    });
};

/**
 * Create character link
 * Link a character to another entity (note, faction, etc.)
 */
export const createCharacterLinkMutation = (options?: Partial<Options<CreateCharacterLinkData>>): UseMutationOptions<unknown, CreateCharacterLinkError, Options<CreateCharacterLinkData>> => {
    const mutationOptions: UseMutationOptions<unknown, CreateCharacterLinkError, Options<CreateCharacterLinkData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createCharacterLink({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete character link
 * Remove a link between a character and another entity
 */
export const deleteCharacterLinkMutation = (options?: Partial<Options<DeleteCharacterLinkData>>): UseMutationOptions<unknown, DeleteCharacterLinkError, Options<DeleteCharacterLinkData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteCharacterLinkError, Options<DeleteCharacterLinkData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteCharacterLink({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete character
 * Delete a character from the game
 */
export const deleteCharacterMutation = (options?: Partial<Options<DeleteCharacterData>>): UseMutationOptions<unknown, DeleteCharacterError, Options<DeleteCharacterData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteCharacterError, Options<DeleteCharacterData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteCharacter({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getCharacterQueryKey = (options: Options<GetCharacterData>) => createQueryKey('getCharacter', options);

/**
 * Get character
 * Get a specific character by ID
 */
export const getCharacterOptions = (options: Options<GetCharacterData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCharacter({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCharacterQueryKey(options)
    });
};

/**
 * Update character
 * Update an existing character
 */
export const updateCharacterMutation = (options?: Partial<Options<UpdateCharacterData>>): UseMutationOptions<UpdateCharacterResponse, UpdateCharacterError, Options<UpdateCharacterData>> => {
    const mutationOptions: UseMutationOptions<UpdateCharacterResponse, UpdateCharacterError, Options<UpdateCharacterData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateCharacter({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getCharacterNotesTreeQueryKey = (options: Options<GetCharacterNotesTreeData>) => createQueryKey('getCharacterNotesTree', options);

/**
 * Get character notes tree
 * Get hierarchical tree of notes associated with a character
 */
export const getCharacterNotesTreeOptions = (options: Options<GetCharacterNotesTreeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCharacterNotesTree({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCharacterNotesTreeQueryKey(options)
    });
};

export const listFactionsQueryKey = (options: Options<ListFactionsData>) => createQueryKey('listFactions', options);

/**
 * List factions
 * Get all factions in a game
 */
export const listFactionsOptions = (options: Options<ListFactionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listFactions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listFactionsQueryKey(options)
    });
};

/**
 * Create faction
 * Create a new faction in the game
 */
export const createFactionMutation = (options?: Partial<Options<CreateFactionData>>): UseMutationOptions<CreateFactionResponse, CreateFactionError, Options<CreateFactionData>> => {
    const mutationOptions: UseMutationOptions<CreateFactionResponse, CreateFactionError, Options<CreateFactionData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createFaction({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getFactionLinksQueryKey = (options: Options<GetFactionLinksData>) => createQueryKey('getFactionLinks', options);

/**
 * Get faction links
 * Get all entities linked to a faction
 */
export const getFactionLinksOptions = (options: Options<GetFactionLinksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getFactionLinks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getFactionLinksQueryKey(options)
    });
};

/**
 * Create faction link
 * Link a faction to another entity (note, character, etc.)
 */
export const createFactionLinkMutation = (options?: Partial<Options<CreateFactionLinkData>>): UseMutationOptions<unknown, CreateFactionLinkError, Options<CreateFactionLinkData>> => {
    const mutationOptions: UseMutationOptions<unknown, CreateFactionLinkError, Options<CreateFactionLinkData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createFactionLink({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete faction link
 * Remove a link between a faction and another entity
 */
export const deleteFactionLinkMutation = (options?: Partial<Options<DeleteFactionLinkData>>): UseMutationOptions<unknown, DeleteFactionLinkError, Options<DeleteFactionLinkData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteFactionLinkError, Options<DeleteFactionLinkData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteFactionLink({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete faction
 * Delete a faction from the game
 */
export const deleteFactionMutation = (options?: Partial<Options<DeleteFactionData>>): UseMutationOptions<unknown, DeleteFactionError, Options<DeleteFactionData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteFactionError, Options<DeleteFactionData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteFaction({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getFactionQueryKey = (options: Options<GetFactionData>) => createQueryKey('getFaction', options);

/**
 * Get faction
 * Get a specific faction by ID
 */
export const getFactionOptions = (options: Options<GetFactionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getFaction({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getFactionQueryKey(options)
    });
};

/**
 * Update faction
 * Update an existing faction
 */
export const updateFactionMutation = (options?: Partial<Options<UpdateFactionData>>): UseMutationOptions<UpdateFactionResponse, UpdateFactionError, Options<UpdateFactionData>> => {
    const mutationOptions: UseMutationOptions<UpdateFactionResponse, UpdateFactionError, Options<UpdateFactionData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateFaction({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listGameEntitiesQueryKey = (options: Options<ListGameEntitiesData>) => createQueryKey('listGameEntities', options);

/**
 * List game entities
 * Retrieve all entities (notes, characters, factions, locations, quests) for the specified game
 */
export const listGameEntitiesOptions = (options: Options<ListGameEntitiesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listGameEntities({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listGameEntitiesQueryKey(options)
    });
};

export const listLocationsQueryKey = (options: Options<ListLocationsData>) => createQueryKey('listLocations', options);

/**
 * List locations
 * Get all locations in a game
 */
export const listLocationsOptions = (options: Options<ListLocationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listLocations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listLocationsQueryKey(options)
    });
};

/**
 * Create location
 * Create a new location in the game
 */
export const createLocationMutation = (options?: Partial<Options<CreateLocationData>>): UseMutationOptions<CreateLocationResponse, CreateLocationError, Options<CreateLocationData>> => {
    const mutationOptions: UseMutationOptions<CreateLocationResponse, CreateLocationError, Options<CreateLocationData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createLocation({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getLocationTreeQueryKey = (options: Options<GetLocationTreeData>) => createQueryKey('getLocationTree', options);

/**
 * Get location tree
 * Get hierarchical tree structure of all locations in a game
 */
export const getLocationTreeOptions = (options: Options<GetLocationTreeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getLocationTree({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getLocationTreeQueryKey(options)
    });
};

/**
 * Delete location
 * Delete a location from the game
 */
export const deleteLocationMutation = (options?: Partial<Options<DeleteLocationData>>): UseMutationOptions<unknown, DeleteLocationError, Options<DeleteLocationData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteLocationError, Options<DeleteLocationData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteLocation({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getLocationQueryKey = (options: Options<GetLocationData>) => createQueryKey('getLocation', options);

/**
 * Get location
 * Get a specific location by ID
 */
export const getLocationOptions = (options: Options<GetLocationData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getLocation({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getLocationQueryKey(options)
    });
};

/**
 * Update location
 * Update an existing location
 */
export const updateLocationMutation = (options?: Partial<Options<UpdateLocationData>>): UseMutationOptions<UpdateLocationResponse, UpdateLocationError, Options<UpdateLocationData>> => {
    const mutationOptions: UseMutationOptions<UpdateLocationResponse, UpdateLocationError, Options<UpdateLocationData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateLocation({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getLocationLinksQueryKey = (options: Options<GetLocationLinksData>) => createQueryKey('getLocationLinks', options);

/**
 * Get location links
 * Get all entities linked to a location
 */
export const getLocationLinksOptions = (options: Options<GetLocationLinksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getLocationLinks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getLocationLinksQueryKey(options)
    });
};

/**
 * Create location link
 * Link a location to another entity (note, faction, etc.)
 */
export const createLocationLinkMutation = (options?: Partial<Options<CreateLocationLinkData>>): UseMutationOptions<unknown, CreateLocationLinkError, Options<CreateLocationLinkData>> => {
    const mutationOptions: UseMutationOptions<unknown, CreateLocationLinkError, Options<CreateLocationLinkData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createLocationLink({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete location link
 * Remove a link between a location and another entity
 */
export const deleteLocationLinkMutation = (options?: Partial<Options<DeleteLocationLinkData>>): UseMutationOptions<unknown, DeleteLocationLinkError, Options<DeleteLocationLinkData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteLocationLinkError, Options<DeleteLocationLinkData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteLocationLink({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listGameMembersQueryKey = (options: Options<ListGameMembersData>) => createQueryKey('listGameMembers', options);

/**
 * List game members
 * Retrieve a list of all members in the specified game
 */
export const listGameMembersOptions = (options: Options<ListGameMembersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listGameMembers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listGameMembersQueryKey(options)
    });
};

/**
 * Add a member to a game
 * Add a user as a member to the specified game
 */
export const addGameMemberMutation = (options?: Partial<Options<AddGameMemberData>>): UseMutationOptions<unknown, AddGameMemberError, Options<AddGameMemberData>> => {
    const mutationOptions: UseMutationOptions<unknown, AddGameMemberError, Options<AddGameMemberData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await addGameMember({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Remove a member from a game
 * Remove a user from the specified game
 */
export const removeGameMemberMutation = (options?: Partial<Options<RemoveGameMemberData>>): UseMutationOptions<unknown, RemoveGameMemberError, Options<RemoveGameMemberData>> => {
    const mutationOptions: UseMutationOptions<unknown, RemoveGameMemberError, Options<RemoveGameMemberData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await removeGameMember({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listNotesQueryKey = (options: Options<ListNotesData>) => createQueryKey('listNotes', options);

/**
 * List notes
 * Retrieve all notes for a specific game
 */
export const listNotesOptions = (options: Options<ListNotesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listNotes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listNotesQueryKey(options)
    });
};

/**
 * Create a note
 * Create a new note for the specified game
 */
export const createNoteMutation = (options?: Partial<Options<CreateNoteData>>): UseMutationOptions<CreateNoteResponse, CreateNoteError, Options<CreateNoteData>> => {
    const mutationOptions: UseMutationOptions<CreateNoteResponse, CreateNoteError, Options<CreateNoteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createNote({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete a note
 * Delete a specific note by its ID
 */
export const deleteNoteMutation = (options?: Partial<Options<DeleteNoteData>>): UseMutationOptions<unknown, DeleteNoteError, Options<DeleteNoteData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteNoteError, Options<DeleteNoteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteNote({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNoteQueryKey = (options: Options<GetNoteData>) => createQueryKey('getNote', options);

/**
 * Get a note
 * Retrieve a specific note by its ID
 */
export const getNoteOptions = (options: Options<GetNoteData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNote({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNoteQueryKey(options)
    });
};

/**
 * Update a note
 * Update a specific note with the provided parameters
 */
export const updateNoteMutation = (options?: Partial<Options<UpdateNoteData>>): UseMutationOptions<UpdateNoteResponse, UpdateNoteError, Options<UpdateNoteData>> => {
    const mutationOptions: UseMutationOptions<UpdateNoteResponse, UpdateNoteError, Options<UpdateNoteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateNote({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNoteLinksQueryKey = (options: Options<GetNoteLinksData>) => createQueryKey('getNoteLinks', options);

/**
 * List note links
 * Retrieve all entities linked to a specific note
 */
export const getNoteLinksOptions = (options: Options<GetNoteLinksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNoteLinks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNoteLinksQueryKey(options)
    });
};

/**
 * Create a link
 * Create a link between a note and another entity (character, faction, location, quest)
 */
export const createNoteLinkMutation = (options?: Partial<Options<CreateNoteLinkData>>): UseMutationOptions<CreateNoteLinkResponse, CreateNoteLinkError, Options<CreateNoteLinkData>> => {
    const mutationOptions: UseMutationOptions<CreateNoteLinkResponse, CreateNoteLinkError, Options<CreateNoteLinkData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createNoteLink({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete a link
 * Remove a link between a note and another entity
 */
export const deleteNoteLinkMutation = (options?: Partial<Options<DeleteNoteLinkData>>): UseMutationOptions<unknown, DeleteNoteLinkError, Options<DeleteNoteLinkData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteNoteLinkError, Options<DeleteNoteLinkData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteNoteLink({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listQuestsQueryKey = (options: Options<ListQuestsData>) => createQueryKey('listQuests', options);

/**
 * List quests
 * Get all quests in a game
 */
export const listQuestsOptions = (options: Options<ListQuestsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listQuests({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listQuestsQueryKey(options)
    });
};

/**
 * Create quest
 * Create a new quest in the game
 */
export const createQuestMutation = (options?: Partial<Options<CreateQuestData>>): UseMutationOptions<CreateQuestResponse, CreateQuestError, Options<CreateQuestData>> => {
    const mutationOptions: UseMutationOptions<CreateQuestResponse, CreateQuestError, Options<CreateQuestData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createQuest({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getQuestTreeQueryKey = (options: Options<GetQuestTreeData>) => createQueryKey('getQuestTree', options);

/**
 * Get quest tree
 * Get hierarchical tree structure of all quests in a game
 */
export const getQuestTreeOptions = (options: Options<GetQuestTreeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getQuestTree({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getQuestTreeQueryKey(options)
    });
};

/**
 * Delete quest
 * Delete a quest from the game
 */
export const deleteQuestMutation = (options?: Partial<Options<DeleteQuestData>>): UseMutationOptions<unknown, DeleteQuestError, Options<DeleteQuestData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteQuestError, Options<DeleteQuestData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteQuest({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getQuestQueryKey = (options: Options<GetQuestData>) => createQueryKey('getQuest', options);

/**
 * Get quest
 * Get a specific quest by ID
 */
export const getQuestOptions = (options: Options<GetQuestData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getQuest({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getQuestQueryKey(options)
    });
};

/**
 * Update quest
 * Update an existing quest
 */
export const updateQuestMutation = (options?: Partial<Options<UpdateQuestData>>): UseMutationOptions<UpdateQuestResponse, UpdateQuestError, Options<UpdateQuestData>> => {
    const mutationOptions: UseMutationOptions<UpdateQuestResponse, UpdateQuestError, Options<UpdateQuestData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateQuest({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getQuestLinksQueryKey = (options: Options<GetQuestLinksData>) => createQueryKey('getQuestLinks', options);

/**
 * Get quest links
 * Get all entities linked to a quest
 */
export const getQuestLinksOptions = (options: Options<GetQuestLinksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getQuestLinks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getQuestLinksQueryKey(options)
    });
};

/**
 * Create quest link
 * Link a quest to another entity (note, character, faction, location)
 */
export const createQuestLinkMutation = (options?: Partial<Options<CreateQuestLinkData>>): UseMutationOptions<unknown, CreateQuestLinkError, Options<CreateQuestLinkData>> => {
    const mutationOptions: UseMutationOptions<unknown, CreateQuestLinkError, Options<CreateQuestLinkData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createQuestLink({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete quest link
 * Remove a link between a quest and another entity
 */
export const deleteQuestLinkMutation = (options?: Partial<Options<DeleteQuestLinkData>>): UseMutationOptions<unknown, DeleteQuestLinkError, Options<DeleteQuestLinkData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteQuestLinkError, Options<DeleteQuestLinkData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteQuestLink({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete a game
 * Delete a specific game by its ID
 */
export const deleteGameMutation = (options?: Partial<Options<DeleteGameData>>): UseMutationOptions<unknown, DeleteGameError, Options<DeleteGameData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteGameError, Options<DeleteGameData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteGame({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getGameQueryKey = (options: Options<GetGameData>) => createQueryKey('getGame', options);

/**
 * Get a game
 * Retrieve a specific game by its ID
 */
export const getGameOptions = (options: Options<GetGameData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getGame({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getGameQueryKey(options)
    });
};

/**
 * Update a game
 * Update a specific game with the provided parameters
 */
export const updateGameMutation = (options?: Partial<Options<UpdateGameData>>): UseMutationOptions<UpdateGameResponse, UpdateGameError, Options<UpdateGameData>> => {
    const mutationOptions: UseMutationOptions<UpdateGameResponse, UpdateGameError, Options<UpdateGameData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateGame({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};